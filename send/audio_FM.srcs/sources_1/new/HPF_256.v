// -------------------------------------------------------------
//
// Module: HPF_256
// Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
// Generated on: 2021-08-08 09:14:40
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: I:\PractiseProject\_Vivado_projects\audio_FM\audio_FM.srcs\sources_1\new
// Name: HPF_256
// SerialPartition: [50  50  50  50  47]
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Partly Serial
// Folding Factor        : 50
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 257
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s40,0 -> [-549755813888 549755813888)
// Filter Internals  : Full Precision
//   Output          : s57,15 -> [-2199023255552 2199023255552)  (auto determined)
//   Product         : s55,15 -> [-549755813888 549755813888)  (auto determined)
//   Accumulator     : s57,15 -> [-2199023255552 2199023255552)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module HPF_256
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [39:0] filter_in; //sfix40
  output  signed [56:0] filter_out; //sfix57_En15

////////////////////////////////////////////////////////////////
//Module Architecture: HPF_256
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b1111111111111100; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b1111111111111110; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b0000000000000010; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000000000000011; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0000000000000110; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0000000000000111; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b0000000000000111; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b0000000000000110; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b0000000000000100; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b0000000000000001; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b1111111111111111; //sfix16_En15
  parameter signed [15:0] coeff18 = 16'b1111111111111100; //sfix16_En15
  parameter signed [15:0] coeff19 = 16'b1111111111111001; //sfix16_En15
  parameter signed [15:0] coeff20 = 16'b1111111111110110; //sfix16_En15
  parameter signed [15:0] coeff21 = 16'b1111111111110100; //sfix16_En15
  parameter signed [15:0] coeff22 = 16'b1111111111110011; //sfix16_En15
  parameter signed [15:0] coeff23 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff24 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff25 = 16'b1111111111110011; //sfix16_En15
  parameter signed [15:0] coeff26 = 16'b1111111111110101; //sfix16_En15
  parameter signed [15:0] coeff27 = 16'b1111111111111000; //sfix16_En15
  parameter signed [15:0] coeff28 = 16'b1111111111111011; //sfix16_En15
  parameter signed [15:0] coeff29 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff30 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff31 = 16'b0000000000001010; //sfix16_En15
  parameter signed [15:0] coeff32 = 16'b0000000000001111; //sfix16_En15
  parameter signed [15:0] coeff33 = 16'b0000000000010100; //sfix16_En15
  parameter signed [15:0] coeff34 = 16'b0000000000010111; //sfix16_En15
  parameter signed [15:0] coeff35 = 16'b0000000000011010; //sfix16_En15
  parameter signed [15:0] coeff36 = 16'b0000000000011010; //sfix16_En15
  parameter signed [15:0] coeff37 = 16'b0000000000011001; //sfix16_En15
  parameter signed [15:0] coeff38 = 16'b0000000000010111; //sfix16_En15
  parameter signed [15:0] coeff39 = 16'b0000000000010010; //sfix16_En15
  parameter signed [15:0] coeff40 = 16'b0000000000001100; //sfix16_En15
  parameter signed [15:0] coeff41 = 16'b0000000000000100; //sfix16_En15
  parameter signed [15:0] coeff42 = 16'b1111111111111100; //sfix16_En15
  parameter signed [15:0] coeff43 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff44 = 16'b1111111111101001; //sfix16_En15
  parameter signed [15:0] coeff45 = 16'b1111111111100001; //sfix16_En15
  parameter signed [15:0] coeff46 = 16'b1111111111011010; //sfix16_En15
  parameter signed [15:0] coeff47 = 16'b1111111111010101; //sfix16_En15
  parameter signed [15:0] coeff48 = 16'b1111111111010011; //sfix16_En15
  parameter signed [15:0] coeff49 = 16'b1111111111010011; //sfix16_En15
  parameter signed [15:0] coeff50 = 16'b1111111111010110; //sfix16_En15
  parameter signed [15:0] coeff51 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeff52 = 16'b1111111111100110; //sfix16_En15
  parameter signed [15:0] coeff53 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff54 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff55 = 16'b0000000000001111; //sfix16_En15
  parameter signed [15:0] coeff56 = 16'b0000000000011110; //sfix16_En15
  parameter signed [15:0] coeff57 = 16'b0000000000101101; //sfix16_En15
  parameter signed [15:0] coeff58 = 16'b0000000000111001; //sfix16_En15
  parameter signed [15:0] coeff59 = 16'b0000000001000011; //sfix16_En15
  parameter signed [15:0] coeff60 = 16'b0000000001001001; //sfix16_En15
  parameter signed [15:0] coeff61 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff62 = 16'b0000000001000111; //sfix16_En15
  parameter signed [15:0] coeff63 = 16'b0000000000111111; //sfix16_En15
  parameter signed [15:0] coeff64 = 16'b0000000000110010; //sfix16_En15
  parameter signed [15:0] coeff65 = 16'b0000000000100000; //sfix16_En15
  parameter signed [15:0] coeff66 = 16'b0000000000001011; //sfix16_En15
  parameter signed [15:0] coeff67 = 16'b1111111111110100; //sfix16_En15
  parameter signed [15:0] coeff68 = 16'b1111111111011100; //sfix16_En15
  parameter signed [15:0] coeff69 = 16'b1111111111000100; //sfix16_En15
  parameter signed [15:0] coeff70 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff71 = 16'b1111111110011101; //sfix16_En15
  parameter signed [15:0] coeff72 = 16'b1111111110010001; //sfix16_En15
  parameter signed [15:0] coeff73 = 16'b1111111110001011; //sfix16_En15
  parameter signed [15:0] coeff74 = 16'b1111111110001100; //sfix16_En15
  parameter signed [15:0] coeff75 = 16'b1111111110010110; //sfix16_En15
  parameter signed [15:0] coeff76 = 16'b1111111110100111; //sfix16_En15
  parameter signed [15:0] coeff77 = 16'b1111111110111111; //sfix16_En15
  parameter signed [15:0] coeff78 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeff79 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff80 = 16'b0000000000100101; //sfix16_En15
  parameter signed [15:0] coeff81 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff82 = 16'b0000000001101110; //sfix16_En15
  parameter signed [15:0] coeff83 = 16'b0000000010001101; //sfix16_En15
  parameter signed [15:0] coeff84 = 16'b0000000010100101; //sfix16_En15
  parameter signed [15:0] coeff85 = 16'b0000000010110011; //sfix16_En15
  parameter signed [15:0] coeff86 = 16'b0000000010110111; //sfix16_En15
  parameter signed [15:0] coeff87 = 16'b0000000010101111; //sfix16_En15
  parameter signed [15:0] coeff88 = 16'b0000000010011010; //sfix16_En15
  parameter signed [15:0] coeff89 = 16'b0000000001111010; //sfix16_En15
  parameter signed [15:0] coeff90 = 16'b0000000001001111; //sfix16_En15
  parameter signed [15:0] coeff91 = 16'b0000000000011100; //sfix16_En15
  parameter signed [15:0] coeff92 = 16'b1111111111100011; //sfix16_En15
  parameter signed [15:0] coeff93 = 16'b1111111110100111; //sfix16_En15
  parameter signed [15:0] coeff94 = 16'b1111111101101101; //sfix16_En15
  parameter signed [15:0] coeff95 = 16'b1111111100110111; //sfix16_En15
  parameter signed [15:0] coeff96 = 16'b1111111100001011; //sfix16_En15
  parameter signed [15:0] coeff97 = 16'b1111111011101011; //sfix16_En15
  parameter signed [15:0] coeff98 = 16'b1111111011011011; //sfix16_En15
  parameter signed [15:0] coeff99 = 16'b1111111011011101; //sfix16_En15
  parameter signed [15:0] coeff100 = 16'b1111111011110010; //sfix16_En15
  parameter signed [15:0] coeff101 = 16'b1111111100011100; //sfix16_En15
  parameter signed [15:0] coeff102 = 16'b1111111101011000; //sfix16_En15
  parameter signed [15:0] coeff103 = 16'b1111111110100101; //sfix16_En15
  parameter signed [15:0] coeff104 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff105 = 16'b0000000001100100; //sfix16_En15
  parameter signed [15:0] coeff106 = 16'b0000000011001011; //sfix16_En15
  parameter signed [15:0] coeff107 = 16'b0000000100101111; //sfix16_En15
  parameter signed [15:0] coeff108 = 16'b0000000110001010; //sfix16_En15
  parameter signed [15:0] coeff109 = 16'b0000000111010101; //sfix16_En15
  parameter signed [15:0] coeff110 = 16'b0000001000001001; //sfix16_En15
  parameter signed [15:0] coeff111 = 16'b0000001000100000; //sfix16_En15
  parameter signed [15:0] coeff112 = 16'b0000001000010101; //sfix16_En15
  parameter signed [15:0] coeff113 = 16'b0000000111100101; //sfix16_En15
  parameter signed [15:0] coeff114 = 16'b0000000110001100; //sfix16_En15
  parameter signed [15:0] coeff115 = 16'b0000000100001011; //sfix16_En15
  parameter signed [15:0] coeff116 = 16'b0000000001100010; //sfix16_En15
  parameter signed [15:0] coeff117 = 16'b1111111110010101; //sfix16_En15
  parameter signed [15:0] coeff118 = 16'b1111111010101001; //sfix16_En15
  parameter signed [15:0] coeff119 = 16'b1111110110100011; //sfix16_En15
  parameter signed [15:0] coeff120 = 16'b1111110010001101; //sfix16_En15
  parameter signed [15:0] coeff121 = 16'b1111101101101111; //sfix16_En15
  parameter signed [15:0] coeff122 = 16'b1111101001010010; //sfix16_En15
  parameter signed [15:0] coeff123 = 16'b1111100101000001; //sfix16_En15
  parameter signed [15:0] coeff124 = 16'b1111100001000111; //sfix16_En15
  parameter signed [15:0] coeff125 = 16'b1111011101101011; //sfix16_En15
  parameter signed [15:0] coeff126 = 16'b1111011010110111; //sfix16_En15
  parameter signed [15:0] coeff127 = 16'b1111011000110001; //sfix16_En15
  parameter signed [15:0] coeff128 = 16'b1111010111011110; //sfix16_En15
  parameter signed [15:0] coeff129 = 16'b0111010111000111; //sfix16_En15
  parameter signed [15:0] coeff130 = 16'b1111010111011110; //sfix16_En15
  parameter signed [15:0] coeff131 = 16'b1111011000110001; //sfix16_En15
  parameter signed [15:0] coeff132 = 16'b1111011010110111; //sfix16_En15
  parameter signed [15:0] coeff133 = 16'b1111011101101011; //sfix16_En15
  parameter signed [15:0] coeff134 = 16'b1111100001000111; //sfix16_En15
  parameter signed [15:0] coeff135 = 16'b1111100101000001; //sfix16_En15
  parameter signed [15:0] coeff136 = 16'b1111101001010010; //sfix16_En15
  parameter signed [15:0] coeff137 = 16'b1111101101101111; //sfix16_En15
  parameter signed [15:0] coeff138 = 16'b1111110010001101; //sfix16_En15
  parameter signed [15:0] coeff139 = 16'b1111110110100011; //sfix16_En15
  parameter signed [15:0] coeff140 = 16'b1111111010101001; //sfix16_En15
  parameter signed [15:0] coeff141 = 16'b1111111110010101; //sfix16_En15
  parameter signed [15:0] coeff142 = 16'b0000000001100010; //sfix16_En15
  parameter signed [15:0] coeff143 = 16'b0000000100001011; //sfix16_En15
  parameter signed [15:0] coeff144 = 16'b0000000110001100; //sfix16_En15
  parameter signed [15:0] coeff145 = 16'b0000000111100101; //sfix16_En15
  parameter signed [15:0] coeff146 = 16'b0000001000010101; //sfix16_En15
  parameter signed [15:0] coeff147 = 16'b0000001000100000; //sfix16_En15
  parameter signed [15:0] coeff148 = 16'b0000001000001001; //sfix16_En15
  parameter signed [15:0] coeff149 = 16'b0000000111010101; //sfix16_En15
  parameter signed [15:0] coeff150 = 16'b0000000110001010; //sfix16_En15
  parameter signed [15:0] coeff151 = 16'b0000000100101111; //sfix16_En15
  parameter signed [15:0] coeff152 = 16'b0000000011001011; //sfix16_En15
  parameter signed [15:0] coeff153 = 16'b0000000001100100; //sfix16_En15
  parameter signed [15:0] coeff154 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff155 = 16'b1111111110100101; //sfix16_En15
  parameter signed [15:0] coeff156 = 16'b1111111101011000; //sfix16_En15
  parameter signed [15:0] coeff157 = 16'b1111111100011100; //sfix16_En15
  parameter signed [15:0] coeff158 = 16'b1111111011110010; //sfix16_En15
  parameter signed [15:0] coeff159 = 16'b1111111011011101; //sfix16_En15
  parameter signed [15:0] coeff160 = 16'b1111111011011011; //sfix16_En15
  parameter signed [15:0] coeff161 = 16'b1111111011101011; //sfix16_En15
  parameter signed [15:0] coeff162 = 16'b1111111100001011; //sfix16_En15
  parameter signed [15:0] coeff163 = 16'b1111111100110111; //sfix16_En15
  parameter signed [15:0] coeff164 = 16'b1111111101101101; //sfix16_En15
  parameter signed [15:0] coeff165 = 16'b1111111110100111; //sfix16_En15
  parameter signed [15:0] coeff166 = 16'b1111111111100011; //sfix16_En15
  parameter signed [15:0] coeff167 = 16'b0000000000011100; //sfix16_En15
  parameter signed [15:0] coeff168 = 16'b0000000001001111; //sfix16_En15
  parameter signed [15:0] coeff169 = 16'b0000000001111010; //sfix16_En15
  parameter signed [15:0] coeff170 = 16'b0000000010011010; //sfix16_En15
  parameter signed [15:0] coeff171 = 16'b0000000010101111; //sfix16_En15
  parameter signed [15:0] coeff172 = 16'b0000000010110111; //sfix16_En15
  parameter signed [15:0] coeff173 = 16'b0000000010110011; //sfix16_En15
  parameter signed [15:0] coeff174 = 16'b0000000010100101; //sfix16_En15
  parameter signed [15:0] coeff175 = 16'b0000000010001101; //sfix16_En15
  parameter signed [15:0] coeff176 = 16'b0000000001101110; //sfix16_En15
  parameter signed [15:0] coeff177 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff178 = 16'b0000000000100101; //sfix16_En15
  parameter signed [15:0] coeff179 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff180 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeff181 = 16'b1111111110111111; //sfix16_En15
  parameter signed [15:0] coeff182 = 16'b1111111110100111; //sfix16_En15
  parameter signed [15:0] coeff183 = 16'b1111111110010110; //sfix16_En15
  parameter signed [15:0] coeff184 = 16'b1111111110001100; //sfix16_En15
  parameter signed [15:0] coeff185 = 16'b1111111110001011; //sfix16_En15
  parameter signed [15:0] coeff186 = 16'b1111111110010001; //sfix16_En15
  parameter signed [15:0] coeff187 = 16'b1111111110011101; //sfix16_En15
  parameter signed [15:0] coeff188 = 16'b1111111110101111; //sfix16_En15
  parameter signed [15:0] coeff189 = 16'b1111111111000100; //sfix16_En15
  parameter signed [15:0] coeff190 = 16'b1111111111011100; //sfix16_En15
  parameter signed [15:0] coeff191 = 16'b1111111111110100; //sfix16_En15
  parameter signed [15:0] coeff192 = 16'b0000000000001011; //sfix16_En15
  parameter signed [15:0] coeff193 = 16'b0000000000100000; //sfix16_En15
  parameter signed [15:0] coeff194 = 16'b0000000000110010; //sfix16_En15
  parameter signed [15:0] coeff195 = 16'b0000000000111111; //sfix16_En15
  parameter signed [15:0] coeff196 = 16'b0000000001000111; //sfix16_En15
  parameter signed [15:0] coeff197 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff198 = 16'b0000000001001001; //sfix16_En15
  parameter signed [15:0] coeff199 = 16'b0000000001000011; //sfix16_En15
  parameter signed [15:0] coeff200 = 16'b0000000000111001; //sfix16_En15
  parameter signed [15:0] coeff201 = 16'b0000000000101101; //sfix16_En15
  parameter signed [15:0] coeff202 = 16'b0000000000011110; //sfix16_En15
  parameter signed [15:0] coeff203 = 16'b0000000000001111; //sfix16_En15
  parameter signed [15:0] coeff204 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff205 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff206 = 16'b1111111111100110; //sfix16_En15
  parameter signed [15:0] coeff207 = 16'b1111111111011101; //sfix16_En15
  parameter signed [15:0] coeff208 = 16'b1111111111010110; //sfix16_En15
  parameter signed [15:0] coeff209 = 16'b1111111111010011; //sfix16_En15
  parameter signed [15:0] coeff210 = 16'b1111111111010011; //sfix16_En15
  parameter signed [15:0] coeff211 = 16'b1111111111010101; //sfix16_En15
  parameter signed [15:0] coeff212 = 16'b1111111111011010; //sfix16_En15
  parameter signed [15:0] coeff213 = 16'b1111111111100001; //sfix16_En15
  parameter signed [15:0] coeff214 = 16'b1111111111101001; //sfix16_En15
  parameter signed [15:0] coeff215 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff216 = 16'b1111111111111100; //sfix16_En15
  parameter signed [15:0] coeff217 = 16'b0000000000000100; //sfix16_En15
  parameter signed [15:0] coeff218 = 16'b0000000000001100; //sfix16_En15
  parameter signed [15:0] coeff219 = 16'b0000000000010010; //sfix16_En15
  parameter signed [15:0] coeff220 = 16'b0000000000010111; //sfix16_En15
  parameter signed [15:0] coeff221 = 16'b0000000000011001; //sfix16_En15
  parameter signed [15:0] coeff222 = 16'b0000000000011010; //sfix16_En15
  parameter signed [15:0] coeff223 = 16'b0000000000011010; //sfix16_En15
  parameter signed [15:0] coeff224 = 16'b0000000000010111; //sfix16_En15
  parameter signed [15:0] coeff225 = 16'b0000000000010100; //sfix16_En15
  parameter signed [15:0] coeff226 = 16'b0000000000001111; //sfix16_En15
  parameter signed [15:0] coeff227 = 16'b0000000000001010; //sfix16_En15
  parameter signed [15:0] coeff228 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff229 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff230 = 16'b1111111111111011; //sfix16_En15
  parameter signed [15:0] coeff231 = 16'b1111111111111000; //sfix16_En15
  parameter signed [15:0] coeff232 = 16'b1111111111110101; //sfix16_En15
  parameter signed [15:0] coeff233 = 16'b1111111111110011; //sfix16_En15
  parameter signed [15:0] coeff234 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff235 = 16'b1111111111110010; //sfix16_En15
  parameter signed [15:0] coeff236 = 16'b1111111111110011; //sfix16_En15
  parameter signed [15:0] coeff237 = 16'b1111111111110100; //sfix16_En15
  parameter signed [15:0] coeff238 = 16'b1111111111110110; //sfix16_En15
  parameter signed [15:0] coeff239 = 16'b1111111111111001; //sfix16_En15
  parameter signed [15:0] coeff240 = 16'b1111111111111100; //sfix16_En15
  parameter signed [15:0] coeff241 = 16'b1111111111111111; //sfix16_En15
  parameter signed [15:0] coeff242 = 16'b0000000000000001; //sfix16_En15
  parameter signed [15:0] coeff243 = 16'b0000000000000100; //sfix16_En15
  parameter signed [15:0] coeff244 = 16'b0000000000000110; //sfix16_En15
  parameter signed [15:0] coeff245 = 16'b0000000000000111; //sfix16_En15
  parameter signed [15:0] coeff246 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff247 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff248 = 16'b0000000000001000; //sfix16_En15
  parameter signed [15:0] coeff249 = 16'b0000000000000111; //sfix16_En15
  parameter signed [15:0] coeff250 = 16'b0000000000000110; //sfix16_En15
  parameter signed [15:0] coeff251 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff252 = 16'b0000000000000011; //sfix16_En15
  parameter signed [15:0] coeff253 = 16'b0000000000000010; //sfix16_En15
  parameter signed [15:0] coeff254 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff255 = 16'b1111111111111110; //sfix16_En15
  parameter signed [15:0] coeff256 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeff257 = 16'b1111111111111100; //sfix16_En15

  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_49; // boolean
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  signed [39:0] delay_pipeline [0:256] ; // sfix40
  wire signed [39:0] inputmux_1; // sfix40
  wire signed [39:0] inputmux_2; // sfix40
  wire signed [39:0] inputmux_3; // sfix40
  wire signed [39:0] inputmux_4; // sfix40
  wire signed [39:0] inputmux_5; // sfix40
  reg  signed [56:0] acc_final; // sfix57_En15
  reg  signed [56:0] acc_out_1; // sfix57_En15
  wire signed [54:0] product_1; // sfix55_En15
  wire signed [15:0] product_1_mux; // sfix16_En15
  wire signed [55:0] mul_temp; // sfix56_En15
  wire signed [56:0] prod_typeconvert_1; // sfix57_En15
  wire signed [56:0] acc_sum_1; // sfix57_En15
  wire signed [56:0] acc_in_1; // sfix57_En15
  wire signed [56:0] add_signext; // sfix57_En15
  wire signed [56:0] add_signext_1; // sfix57_En15
  wire signed [57:0] add_temp; // sfix58_En15
  reg  signed [56:0] acc_out_2; // sfix57_En15
  wire signed [54:0] product_2; // sfix55_En15
  wire signed [15:0] product_2_mux; // sfix16_En15
  wire signed [55:0] mul_temp_1; // sfix56_En15
  wire signed [56:0] prod_typeconvert_2; // sfix57_En15
  wire signed [56:0] acc_sum_2; // sfix57_En15
  wire signed [56:0] acc_in_2; // sfix57_En15
  wire signed [56:0] add_signext_2; // sfix57_En15
  wire signed [56:0] add_signext_3; // sfix57_En15
  wire signed [57:0] add_temp_1; // sfix58_En15
  reg  signed [56:0] acc_out_3; // sfix57_En15
  wire signed [54:0] product_3; // sfix55_En15
  wire signed [15:0] product_3_mux; // sfix16_En15
  wire signed [55:0] mul_temp_2; // sfix56_En15
  wire signed [56:0] prod_typeconvert_3; // sfix57_En15
  wire signed [56:0] acc_sum_3; // sfix57_En15
  wire signed [56:0] acc_in_3; // sfix57_En15
  wire signed [56:0] add_signext_4; // sfix57_En15
  wire signed [56:0] add_signext_5; // sfix57_En15
  wire signed [57:0] add_temp_2; // sfix58_En15
  reg  signed [56:0] acc_out_4; // sfix57_En15
  wire signed [54:0] product_4; // sfix55_En15
  wire signed [15:0] product_4_mux; // sfix16_En15
  wire signed [55:0] mul_temp_3; // sfix56_En15
  wire signed [56:0] prod_typeconvert_4; // sfix57_En15
  wire signed [56:0] acc_sum_4; // sfix57_En15
  wire signed [56:0] acc_in_4; // sfix57_En15
  wire signed [56:0] add_signext_6; // sfix57_En15
  wire signed [56:0] add_signext_7; // sfix57_En15
  wire signed [57:0] add_temp_3; // sfix58_En15
  reg  signed [56:0] acc_out_5; // sfix57_En15
  wire signed [54:0] product_5; // sfix55_En15
  wire signed [15:0] product_5_mux; // sfix16_En15
  wire signed [55:0] mul_temp_4; // sfix56_En15
  wire signed [56:0] prod_typeconvert_5; // sfix57_En15
  wire signed [56:0] acc_sum_5; // sfix57_En15
  wire signed [56:0] acc_in_5; // sfix57_En15
  wire signed [56:0] add_signext_8; // sfix57_En15
  wire signed [56:0] add_signext_9; // sfix57_En15
  wire signed [57:0] add_temp_4; // sfix58_En15
  wire signed [56:0] sum1; // sfix57_En15
  wire signed [56:0] add_signext_10; // sfix57_En15
  wire signed [56:0] add_signext_11; // sfix57_En15
  wire signed [57:0] add_temp_5; // sfix58_En15
  wire signed [56:0] sum2; // sfix57_En15
  wire signed [56:0] add_signext_12; // sfix57_En15
  wire signed [56:0] add_signext_13; // sfix57_En15
  wire signed [57:0] add_temp_6; // sfix58_En15
  wire signed [56:0] sum3; // sfix57_En15
  wire signed [56:0] add_signext_14; // sfix57_En15
  wire signed [56:0] add_signext_15; // sfix57_En15
  wire signed [57:0] add_temp_7; // sfix58_En15
  wire signed [56:0] sum4; // sfix57_En15
  wire signed [56:0] add_signext_16; // sfix57_En15
  wire signed [56:0] add_signext_17; // sfix57_En15
  wire signed [57:0] add_temp_8; // sfix58_En15
  reg  signed [56:0] output_register; // sfix57_En15

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 6'b110001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 6'b110001) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 6'b000001;
          end
        end
      end
    end // Counter_process

  assign  phase_49 = (cur_count == 6'b110001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_1 = (((cur_count == 6'b000000) ||
                     (cur_count == 6'b000001)  ||
                     (cur_count == 6'b000010)  ||
                     (cur_count == 6'b000011)  ||
                     (cur_count == 6'b000100)  ||
                     (cur_count == 6'b000101)  ||
                     (cur_count == 6'b000110)  ||
                     (cur_count == 6'b000111)  ||
                     (cur_count == 6'b001000)  ||
                     (cur_count == 6'b001001)  ||
                     (cur_count == 6'b001010)  ||
                     (cur_count == 6'b001011)  ||
                     (cur_count == 6'b001100)  ||
                     (cur_count == 6'b001101)  ||
                     (cur_count == 6'b001110)  ||
                     (cur_count == 6'b001111)  ||
                     (cur_count == 6'b010000)  ||
                     (cur_count == 6'b010001)  ||
                     (cur_count == 6'b010010)  ||
                     (cur_count == 6'b010011)  ||
                     (cur_count == 6'b010100)  ||
                     (cur_count == 6'b010101)  ||
                     (cur_count == 6'b010110)  ||
                     (cur_count == 6'b010111)  ||
                     (cur_count == 6'b011000)  ||
                     (cur_count == 6'b011001)  ||
                     (cur_count == 6'b011010)  ||
                     (cur_count == 6'b011011)  ||
                     (cur_count == 6'b011100)  ||
                     (cur_count == 6'b011101)  ||
                     (cur_count == 6'b011110)  ||
                     (cur_count == 6'b011111)  ||
                     (cur_count == 6'b100000)  ||
                     (cur_count == 6'b100001)  ||
                     (cur_count == 6'b100010)  ||
                     (cur_count == 6'b100011)  ||
                     (cur_count == 6'b100100)  ||
                     (cur_count == 6'b100101)  ||
                     (cur_count == 6'b100110)  ||
                     (cur_count == 6'b100111)  ||
                     (cur_count == 6'b101000)  ||
                     (cur_count == 6'b101001)  ||
                     (cur_count == 6'b101010)  ||
                     (cur_count == 6'b101011)  ||
                     (cur_count == 6'b101100)  ||
                     (cur_count == 6'b101101)  ||
                     (cur_count == 6'b101110)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
        delay_pipeline[66] <= 0;
        delay_pipeline[67] <= 0;
        delay_pipeline[68] <= 0;
        delay_pipeline[69] <= 0;
        delay_pipeline[70] <= 0;
        delay_pipeline[71] <= 0;
        delay_pipeline[72] <= 0;
        delay_pipeline[73] <= 0;
        delay_pipeline[74] <= 0;
        delay_pipeline[75] <= 0;
        delay_pipeline[76] <= 0;
        delay_pipeline[77] <= 0;
        delay_pipeline[78] <= 0;
        delay_pipeline[79] <= 0;
        delay_pipeline[80] <= 0;
        delay_pipeline[81] <= 0;
        delay_pipeline[82] <= 0;
        delay_pipeline[83] <= 0;
        delay_pipeline[84] <= 0;
        delay_pipeline[85] <= 0;
        delay_pipeline[86] <= 0;
        delay_pipeline[87] <= 0;
        delay_pipeline[88] <= 0;
        delay_pipeline[89] <= 0;
        delay_pipeline[90] <= 0;
        delay_pipeline[91] <= 0;
        delay_pipeline[92] <= 0;
        delay_pipeline[93] <= 0;
        delay_pipeline[94] <= 0;
        delay_pipeline[95] <= 0;
        delay_pipeline[96] <= 0;
        delay_pipeline[97] <= 0;
        delay_pipeline[98] <= 0;
        delay_pipeline[99] <= 0;
        delay_pipeline[100] <= 0;
        delay_pipeline[101] <= 0;
        delay_pipeline[102] <= 0;
        delay_pipeline[103] <= 0;
        delay_pipeline[104] <= 0;
        delay_pipeline[105] <= 0;
        delay_pipeline[106] <= 0;
        delay_pipeline[107] <= 0;
        delay_pipeline[108] <= 0;
        delay_pipeline[109] <= 0;
        delay_pipeline[110] <= 0;
        delay_pipeline[111] <= 0;
        delay_pipeline[112] <= 0;
        delay_pipeline[113] <= 0;
        delay_pipeline[114] <= 0;
        delay_pipeline[115] <= 0;
        delay_pipeline[116] <= 0;
        delay_pipeline[117] <= 0;
        delay_pipeline[118] <= 0;
        delay_pipeline[119] <= 0;
        delay_pipeline[120] <= 0;
        delay_pipeline[121] <= 0;
        delay_pipeline[122] <= 0;
        delay_pipeline[123] <= 0;
        delay_pipeline[124] <= 0;
        delay_pipeline[125] <= 0;
        delay_pipeline[126] <= 0;
        delay_pipeline[127] <= 0;
        delay_pipeline[128] <= 0;
        delay_pipeline[129] <= 0;
        delay_pipeline[130] <= 0;
        delay_pipeline[131] <= 0;
        delay_pipeline[132] <= 0;
        delay_pipeline[133] <= 0;
        delay_pipeline[134] <= 0;
        delay_pipeline[135] <= 0;
        delay_pipeline[136] <= 0;
        delay_pipeline[137] <= 0;
        delay_pipeline[138] <= 0;
        delay_pipeline[139] <= 0;
        delay_pipeline[140] <= 0;
        delay_pipeline[141] <= 0;
        delay_pipeline[142] <= 0;
        delay_pipeline[143] <= 0;
        delay_pipeline[144] <= 0;
        delay_pipeline[145] <= 0;
        delay_pipeline[146] <= 0;
        delay_pipeline[147] <= 0;
        delay_pipeline[148] <= 0;
        delay_pipeline[149] <= 0;
        delay_pipeline[150] <= 0;
        delay_pipeline[151] <= 0;
        delay_pipeline[152] <= 0;
        delay_pipeline[153] <= 0;
        delay_pipeline[154] <= 0;
        delay_pipeline[155] <= 0;
        delay_pipeline[156] <= 0;
        delay_pipeline[157] <= 0;
        delay_pipeline[158] <= 0;
        delay_pipeline[159] <= 0;
        delay_pipeline[160] <= 0;
        delay_pipeline[161] <= 0;
        delay_pipeline[162] <= 0;
        delay_pipeline[163] <= 0;
        delay_pipeline[164] <= 0;
        delay_pipeline[165] <= 0;
        delay_pipeline[166] <= 0;
        delay_pipeline[167] <= 0;
        delay_pipeline[168] <= 0;
        delay_pipeline[169] <= 0;
        delay_pipeline[170] <= 0;
        delay_pipeline[171] <= 0;
        delay_pipeline[172] <= 0;
        delay_pipeline[173] <= 0;
        delay_pipeline[174] <= 0;
        delay_pipeline[175] <= 0;
        delay_pipeline[176] <= 0;
        delay_pipeline[177] <= 0;
        delay_pipeline[178] <= 0;
        delay_pipeline[179] <= 0;
        delay_pipeline[180] <= 0;
        delay_pipeline[181] <= 0;
        delay_pipeline[182] <= 0;
        delay_pipeline[183] <= 0;
        delay_pipeline[184] <= 0;
        delay_pipeline[185] <= 0;
        delay_pipeline[186] <= 0;
        delay_pipeline[187] <= 0;
        delay_pipeline[188] <= 0;
        delay_pipeline[189] <= 0;
        delay_pipeline[190] <= 0;
        delay_pipeline[191] <= 0;
        delay_pipeline[192] <= 0;
        delay_pipeline[193] <= 0;
        delay_pipeline[194] <= 0;
        delay_pipeline[195] <= 0;
        delay_pipeline[196] <= 0;
        delay_pipeline[197] <= 0;
        delay_pipeline[198] <= 0;
        delay_pipeline[199] <= 0;
        delay_pipeline[200] <= 0;
        delay_pipeline[201] <= 0;
        delay_pipeline[202] <= 0;
        delay_pipeline[203] <= 0;
        delay_pipeline[204] <= 0;
        delay_pipeline[205] <= 0;
        delay_pipeline[206] <= 0;
        delay_pipeline[207] <= 0;
        delay_pipeline[208] <= 0;
        delay_pipeline[209] <= 0;
        delay_pipeline[210] <= 0;
        delay_pipeline[211] <= 0;
        delay_pipeline[212] <= 0;
        delay_pipeline[213] <= 0;
        delay_pipeline[214] <= 0;
        delay_pipeline[215] <= 0;
        delay_pipeline[216] <= 0;
        delay_pipeline[217] <= 0;
        delay_pipeline[218] <= 0;
        delay_pipeline[219] <= 0;
        delay_pipeline[220] <= 0;
        delay_pipeline[221] <= 0;
        delay_pipeline[222] <= 0;
        delay_pipeline[223] <= 0;
        delay_pipeline[224] <= 0;
        delay_pipeline[225] <= 0;
        delay_pipeline[226] <= 0;
        delay_pipeline[227] <= 0;
        delay_pipeline[228] <= 0;
        delay_pipeline[229] <= 0;
        delay_pipeline[230] <= 0;
        delay_pipeline[231] <= 0;
        delay_pipeline[232] <= 0;
        delay_pipeline[233] <= 0;
        delay_pipeline[234] <= 0;
        delay_pipeline[235] <= 0;
        delay_pipeline[236] <= 0;
        delay_pipeline[237] <= 0;
        delay_pipeline[238] <= 0;
        delay_pipeline[239] <= 0;
        delay_pipeline[240] <= 0;
        delay_pipeline[241] <= 0;
        delay_pipeline[242] <= 0;
        delay_pipeline[243] <= 0;
        delay_pipeline[244] <= 0;
        delay_pipeline[245] <= 0;
        delay_pipeline[246] <= 0;
        delay_pipeline[247] <= 0;
        delay_pipeline[248] <= 0;
        delay_pipeline[249] <= 0;
        delay_pipeline[250] <= 0;
        delay_pipeline[251] <= 0;
        delay_pipeline[252] <= 0;
        delay_pipeline[253] <= 0;
        delay_pipeline[254] <= 0;
        delay_pipeline[255] <= 0;
        delay_pipeline[256] <= 0;
      end
      else begin
        if (phase_49 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
          delay_pipeline[107] <= delay_pipeline[106];
          delay_pipeline[108] <= delay_pipeline[107];
          delay_pipeline[109] <= delay_pipeline[108];
          delay_pipeline[110] <= delay_pipeline[109];
          delay_pipeline[111] <= delay_pipeline[110];
          delay_pipeline[112] <= delay_pipeline[111];
          delay_pipeline[113] <= delay_pipeline[112];
          delay_pipeline[114] <= delay_pipeline[113];
          delay_pipeline[115] <= delay_pipeline[114];
          delay_pipeline[116] <= delay_pipeline[115];
          delay_pipeline[117] <= delay_pipeline[116];
          delay_pipeline[118] <= delay_pipeline[117];
          delay_pipeline[119] <= delay_pipeline[118];
          delay_pipeline[120] <= delay_pipeline[119];
          delay_pipeline[121] <= delay_pipeline[120];
          delay_pipeline[122] <= delay_pipeline[121];
          delay_pipeline[123] <= delay_pipeline[122];
          delay_pipeline[124] <= delay_pipeline[123];
          delay_pipeline[125] <= delay_pipeline[124];
          delay_pipeline[126] <= delay_pipeline[125];
          delay_pipeline[127] <= delay_pipeline[126];
          delay_pipeline[128] <= delay_pipeline[127];
          delay_pipeline[129] <= delay_pipeline[128];
          delay_pipeline[130] <= delay_pipeline[129];
          delay_pipeline[131] <= delay_pipeline[130];
          delay_pipeline[132] <= delay_pipeline[131];
          delay_pipeline[133] <= delay_pipeline[132];
          delay_pipeline[134] <= delay_pipeline[133];
          delay_pipeline[135] <= delay_pipeline[134];
          delay_pipeline[136] <= delay_pipeline[135];
          delay_pipeline[137] <= delay_pipeline[136];
          delay_pipeline[138] <= delay_pipeline[137];
          delay_pipeline[139] <= delay_pipeline[138];
          delay_pipeline[140] <= delay_pipeline[139];
          delay_pipeline[141] <= delay_pipeline[140];
          delay_pipeline[142] <= delay_pipeline[141];
          delay_pipeline[143] <= delay_pipeline[142];
          delay_pipeline[144] <= delay_pipeline[143];
          delay_pipeline[145] <= delay_pipeline[144];
          delay_pipeline[146] <= delay_pipeline[145];
          delay_pipeline[147] <= delay_pipeline[146];
          delay_pipeline[148] <= delay_pipeline[147];
          delay_pipeline[149] <= delay_pipeline[148];
          delay_pipeline[150] <= delay_pipeline[149];
          delay_pipeline[151] <= delay_pipeline[150];
          delay_pipeline[152] <= delay_pipeline[151];
          delay_pipeline[153] <= delay_pipeline[152];
          delay_pipeline[154] <= delay_pipeline[153];
          delay_pipeline[155] <= delay_pipeline[154];
          delay_pipeline[156] <= delay_pipeline[155];
          delay_pipeline[157] <= delay_pipeline[156];
          delay_pipeline[158] <= delay_pipeline[157];
          delay_pipeline[159] <= delay_pipeline[158];
          delay_pipeline[160] <= delay_pipeline[159];
          delay_pipeline[161] <= delay_pipeline[160];
          delay_pipeline[162] <= delay_pipeline[161];
          delay_pipeline[163] <= delay_pipeline[162];
          delay_pipeline[164] <= delay_pipeline[163];
          delay_pipeline[165] <= delay_pipeline[164];
          delay_pipeline[166] <= delay_pipeline[165];
          delay_pipeline[167] <= delay_pipeline[166];
          delay_pipeline[168] <= delay_pipeline[167];
          delay_pipeline[169] <= delay_pipeline[168];
          delay_pipeline[170] <= delay_pipeline[169];
          delay_pipeline[171] <= delay_pipeline[170];
          delay_pipeline[172] <= delay_pipeline[171];
          delay_pipeline[173] <= delay_pipeline[172];
          delay_pipeline[174] <= delay_pipeline[173];
          delay_pipeline[175] <= delay_pipeline[174];
          delay_pipeline[176] <= delay_pipeline[175];
          delay_pipeline[177] <= delay_pipeline[176];
          delay_pipeline[178] <= delay_pipeline[177];
          delay_pipeline[179] <= delay_pipeline[178];
          delay_pipeline[180] <= delay_pipeline[179];
          delay_pipeline[181] <= delay_pipeline[180];
          delay_pipeline[182] <= delay_pipeline[181];
          delay_pipeline[183] <= delay_pipeline[182];
          delay_pipeline[184] <= delay_pipeline[183];
          delay_pipeline[185] <= delay_pipeline[184];
          delay_pipeline[186] <= delay_pipeline[185];
          delay_pipeline[187] <= delay_pipeline[186];
          delay_pipeline[188] <= delay_pipeline[187];
          delay_pipeline[189] <= delay_pipeline[188];
          delay_pipeline[190] <= delay_pipeline[189];
          delay_pipeline[191] <= delay_pipeline[190];
          delay_pipeline[192] <= delay_pipeline[191];
          delay_pipeline[193] <= delay_pipeline[192];
          delay_pipeline[194] <= delay_pipeline[193];
          delay_pipeline[195] <= delay_pipeline[194];
          delay_pipeline[196] <= delay_pipeline[195];
          delay_pipeline[197] <= delay_pipeline[196];
          delay_pipeline[198] <= delay_pipeline[197];
          delay_pipeline[199] <= delay_pipeline[198];
          delay_pipeline[200] <= delay_pipeline[199];
          delay_pipeline[201] <= delay_pipeline[200];
          delay_pipeline[202] <= delay_pipeline[201];
          delay_pipeline[203] <= delay_pipeline[202];
          delay_pipeline[204] <= delay_pipeline[203];
          delay_pipeline[205] <= delay_pipeline[204];
          delay_pipeline[206] <= delay_pipeline[205];
          delay_pipeline[207] <= delay_pipeline[206];
          delay_pipeline[208] <= delay_pipeline[207];
          delay_pipeline[209] <= delay_pipeline[208];
          delay_pipeline[210] <= delay_pipeline[209];
          delay_pipeline[211] <= delay_pipeline[210];
          delay_pipeline[212] <= delay_pipeline[211];
          delay_pipeline[213] <= delay_pipeline[212];
          delay_pipeline[214] <= delay_pipeline[213];
          delay_pipeline[215] <= delay_pipeline[214];
          delay_pipeline[216] <= delay_pipeline[215];
          delay_pipeline[217] <= delay_pipeline[216];
          delay_pipeline[218] <= delay_pipeline[217];
          delay_pipeline[219] <= delay_pipeline[218];
          delay_pipeline[220] <= delay_pipeline[219];
          delay_pipeline[221] <= delay_pipeline[220];
          delay_pipeline[222] <= delay_pipeline[221];
          delay_pipeline[223] <= delay_pipeline[222];
          delay_pipeline[224] <= delay_pipeline[223];
          delay_pipeline[225] <= delay_pipeline[224];
          delay_pipeline[226] <= delay_pipeline[225];
          delay_pipeline[227] <= delay_pipeline[226];
          delay_pipeline[228] <= delay_pipeline[227];
          delay_pipeline[229] <= delay_pipeline[228];
          delay_pipeline[230] <= delay_pipeline[229];
          delay_pipeline[231] <= delay_pipeline[230];
          delay_pipeline[232] <= delay_pipeline[231];
          delay_pipeline[233] <= delay_pipeline[232];
          delay_pipeline[234] <= delay_pipeline[233];
          delay_pipeline[235] <= delay_pipeline[234];
          delay_pipeline[236] <= delay_pipeline[235];
          delay_pipeline[237] <= delay_pipeline[236];
          delay_pipeline[238] <= delay_pipeline[237];
          delay_pipeline[239] <= delay_pipeline[238];
          delay_pipeline[240] <= delay_pipeline[239];
          delay_pipeline[241] <= delay_pipeline[240];
          delay_pipeline[242] <= delay_pipeline[241];
          delay_pipeline[243] <= delay_pipeline[242];
          delay_pipeline[244] <= delay_pipeline[243];
          delay_pipeline[245] <= delay_pipeline[244];
          delay_pipeline[246] <= delay_pipeline[245];
          delay_pipeline[247] <= delay_pipeline[246];
          delay_pipeline[248] <= delay_pipeline[247];
          delay_pipeline[249] <= delay_pipeline[248];
          delay_pipeline[250] <= delay_pipeline[249];
          delay_pipeline[251] <= delay_pipeline[250];
          delay_pipeline[252] <= delay_pipeline[251];
          delay_pipeline[253] <= delay_pipeline[252];
          delay_pipeline[254] <= delay_pipeline[253];
          delay_pipeline[255] <= delay_pipeline[254];
          delay_pipeline[256] <= delay_pipeline[255];
        end
      end
    end // Delay_Pipeline_process


  assign inputmux_1 = (cur_count == 6'b000000) ? delay_pipeline[0] :
                     (cur_count == 6'b000001) ? delay_pipeline[1] :
                     (cur_count == 6'b000010) ? delay_pipeline[2] :
                     (cur_count == 6'b000011) ? delay_pipeline[4] :
                     (cur_count == 6'b000100) ? delay_pipeline[5] :
                     (cur_count == 6'b000101) ? delay_pipeline[6] :
                     (cur_count == 6'b000110) ? delay_pipeline[7] :
                     (cur_count == 6'b000111) ? delay_pipeline[8] :
                     (cur_count == 6'b001000) ? delay_pipeline[9] :
                     (cur_count == 6'b001001) ? delay_pipeline[10] :
                     (cur_count == 6'b001010) ? delay_pipeline[11] :
                     (cur_count == 6'b001011) ? delay_pipeline[12] :
                     (cur_count == 6'b001100) ? delay_pipeline[13] :
                     (cur_count == 6'b001101) ? delay_pipeline[14] :
                     (cur_count == 6'b001110) ? delay_pipeline[15] :
                     (cur_count == 6'b001111) ? delay_pipeline[16] :
                     (cur_count == 6'b010000) ? delay_pipeline[17] :
                     (cur_count == 6'b010001) ? delay_pipeline[18] :
                     (cur_count == 6'b010010) ? delay_pipeline[19] :
                     (cur_count == 6'b010011) ? delay_pipeline[20] :
                     (cur_count == 6'b010100) ? delay_pipeline[21] :
                     (cur_count == 6'b010101) ? delay_pipeline[22] :
                     (cur_count == 6'b010110) ? delay_pipeline[23] :
                     (cur_count == 6'b010111) ? delay_pipeline[24] :
                     (cur_count == 6'b011000) ? delay_pipeline[25] :
                     (cur_count == 6'b011001) ? delay_pipeline[26] :
                     (cur_count == 6'b011010) ? delay_pipeline[27] :
                     (cur_count == 6'b011011) ? delay_pipeline[29] :
                     (cur_count == 6'b011100) ? delay_pipeline[30] :
                     (cur_count == 6'b011101) ? delay_pipeline[31] :
                     (cur_count == 6'b011110) ? delay_pipeline[32] :
                     (cur_count == 6'b011111) ? delay_pipeline[33] :
                     (cur_count == 6'b100000) ? delay_pipeline[34] :
                     (cur_count == 6'b100001) ? delay_pipeline[35] :
                     (cur_count == 6'b100010) ? delay_pipeline[36] :
                     (cur_count == 6'b100011) ? delay_pipeline[37] :
                     (cur_count == 6'b100100) ? delay_pipeline[38] :
                     (cur_count == 6'b100101) ? delay_pipeline[39] :
                     (cur_count == 6'b100110) ? delay_pipeline[40] :
                     (cur_count == 6'b100111) ? delay_pipeline[41] :
                     (cur_count == 6'b101000) ? delay_pipeline[42] :
                     (cur_count == 6'b101001) ? delay_pipeline[43] :
                     (cur_count == 6'b101010) ? delay_pipeline[44] :
                     (cur_count == 6'b101011) ? delay_pipeline[45] :
                     (cur_count == 6'b101100) ? delay_pipeline[46] :
                     (cur_count == 6'b101101) ? delay_pipeline[47] :
                     (cur_count == 6'b101110) ? delay_pipeline[48] :
                     (cur_count == 6'b101111) ? delay_pipeline[49] :
                     (cur_count == 6'b110000) ? delay_pipeline[50] :
                     delay_pipeline[51];

  assign inputmux_2 = (cur_count == 6'b000000) ? delay_pipeline[52] :
                     (cur_count == 6'b000001) ? delay_pipeline[54] :
                     (cur_count == 6'b000010) ? delay_pipeline[55] :
                     (cur_count == 6'b000011) ? delay_pipeline[56] :
                     (cur_count == 6'b000100) ? delay_pipeline[57] :
                     (cur_count == 6'b000101) ? delay_pipeline[58] :
                     (cur_count == 6'b000110) ? delay_pipeline[59] :
                     (cur_count == 6'b000111) ? delay_pipeline[60] :
                     (cur_count == 6'b001000) ? delay_pipeline[61] :
                     (cur_count == 6'b001001) ? delay_pipeline[62] :
                     (cur_count == 6'b001010) ? delay_pipeline[63] :
                     (cur_count == 6'b001011) ? delay_pipeline[64] :
                     (cur_count == 6'b001100) ? delay_pipeline[65] :
                     (cur_count == 6'b001101) ? delay_pipeline[66] :
                     (cur_count == 6'b001110) ? delay_pipeline[67] :
                     (cur_count == 6'b001111) ? delay_pipeline[68] :
                     (cur_count == 6'b010000) ? delay_pipeline[69] :
                     (cur_count == 6'b010001) ? delay_pipeline[70] :
                     (cur_count == 6'b010010) ? delay_pipeline[71] :
                     (cur_count == 6'b010011) ? delay_pipeline[72] :
                     (cur_count == 6'b010100) ? delay_pipeline[73] :
                     (cur_count == 6'b010101) ? delay_pipeline[74] :
                     (cur_count == 6'b010110) ? delay_pipeline[75] :
                     (cur_count == 6'b010111) ? delay_pipeline[76] :
                     (cur_count == 6'b011000) ? delay_pipeline[77] :
                     (cur_count == 6'b011001) ? delay_pipeline[79] :
                     (cur_count == 6'b011010) ? delay_pipeline[80] :
                     (cur_count == 6'b011011) ? delay_pipeline[81] :
                     (cur_count == 6'b011100) ? delay_pipeline[82] :
                     (cur_count == 6'b011101) ? delay_pipeline[83] :
                     (cur_count == 6'b011110) ? delay_pipeline[84] :
                     (cur_count == 6'b011111) ? delay_pipeline[85] :
                     (cur_count == 6'b100000) ? delay_pipeline[86] :
                     (cur_count == 6'b100001) ? delay_pipeline[87] :
                     (cur_count == 6'b100010) ? delay_pipeline[88] :
                     (cur_count == 6'b100011) ? delay_pipeline[89] :
                     (cur_count == 6'b100100) ? delay_pipeline[90] :
                     (cur_count == 6'b100101) ? delay_pipeline[91] :
                     (cur_count == 6'b100110) ? delay_pipeline[92] :
                     (cur_count == 6'b100111) ? delay_pipeline[93] :
                     (cur_count == 6'b101000) ? delay_pipeline[94] :
                     (cur_count == 6'b101001) ? delay_pipeline[95] :
                     (cur_count == 6'b101010) ? delay_pipeline[96] :
                     (cur_count == 6'b101011) ? delay_pipeline[97] :
                     (cur_count == 6'b101100) ? delay_pipeline[98] :
                     (cur_count == 6'b101101) ? delay_pipeline[99] :
                     (cur_count == 6'b101110) ? delay_pipeline[100] :
                     (cur_count == 6'b101111) ? delay_pipeline[101] :
                     (cur_count == 6'b110000) ? delay_pipeline[102] :
                     delay_pipeline[104];

  assign inputmux_3 = (cur_count == 6'b000000) ? delay_pipeline[105] :
                     (cur_count == 6'b000001) ? delay_pipeline[106] :
                     (cur_count == 6'b000010) ? delay_pipeline[107] :
                     (cur_count == 6'b000011) ? delay_pipeline[108] :
                     (cur_count == 6'b000100) ? delay_pipeline[109] :
                     (cur_count == 6'b000101) ? delay_pipeline[110] :
                     (cur_count == 6'b000110) ? delay_pipeline[111] :
                     (cur_count == 6'b000111) ? delay_pipeline[112] :
                     (cur_count == 6'b001000) ? delay_pipeline[113] :
                     (cur_count == 6'b001001) ? delay_pipeline[114] :
                     (cur_count == 6'b001010) ? delay_pipeline[115] :
                     (cur_count == 6'b001011) ? delay_pipeline[116] :
                     (cur_count == 6'b001100) ? delay_pipeline[117] :
                     (cur_count == 6'b001101) ? delay_pipeline[118] :
                     (cur_count == 6'b001110) ? delay_pipeline[119] :
                     (cur_count == 6'b001111) ? delay_pipeline[120] :
                     (cur_count == 6'b010000) ? delay_pipeline[121] :
                     (cur_count == 6'b010001) ? delay_pipeline[122] :
                     (cur_count == 6'b010010) ? delay_pipeline[123] :
                     (cur_count == 6'b010011) ? delay_pipeline[124] :
                     (cur_count == 6'b010100) ? delay_pipeline[125] :
                     (cur_count == 6'b010101) ? delay_pipeline[126] :
                     (cur_count == 6'b010110) ? delay_pipeline[127] :
                     (cur_count == 6'b010111) ? delay_pipeline[128] :
                     (cur_count == 6'b011000) ? delay_pipeline[129] :
                     (cur_count == 6'b011001) ? delay_pipeline[130] :
                     (cur_count == 6'b011010) ? delay_pipeline[131] :
                     (cur_count == 6'b011011) ? delay_pipeline[132] :
                     (cur_count == 6'b011100) ? delay_pipeline[133] :
                     (cur_count == 6'b011101) ? delay_pipeline[134] :
                     (cur_count == 6'b011110) ? delay_pipeline[135] :
                     (cur_count == 6'b011111) ? delay_pipeline[136] :
                     (cur_count == 6'b100000) ? delay_pipeline[137] :
                     (cur_count == 6'b100001) ? delay_pipeline[138] :
                     (cur_count == 6'b100010) ? delay_pipeline[139] :
                     (cur_count == 6'b100011) ? delay_pipeline[140] :
                     (cur_count == 6'b100100) ? delay_pipeline[141] :
                     (cur_count == 6'b100101) ? delay_pipeline[142] :
                     (cur_count == 6'b100110) ? delay_pipeline[143] :
                     (cur_count == 6'b100111) ? delay_pipeline[144] :
                     (cur_count == 6'b101000) ? delay_pipeline[145] :
                     (cur_count == 6'b101001) ? delay_pipeline[146] :
                     (cur_count == 6'b101010) ? delay_pipeline[147] :
                     (cur_count == 6'b101011) ? delay_pipeline[148] :
                     (cur_count == 6'b101100) ? delay_pipeline[149] :
                     (cur_count == 6'b101101) ? delay_pipeline[150] :
                     (cur_count == 6'b101110) ? delay_pipeline[151] :
                     (cur_count == 6'b101111) ? delay_pipeline[152] :
                     (cur_count == 6'b110000) ? delay_pipeline[154] :
                     delay_pipeline[155];

  assign inputmux_4 = (cur_count == 6'b000000) ? delay_pipeline[156] :
                     (cur_count == 6'b000001) ? delay_pipeline[157] :
                     (cur_count == 6'b000010) ? delay_pipeline[158] :
                     (cur_count == 6'b000011) ? delay_pipeline[159] :
                     (cur_count == 6'b000100) ? delay_pipeline[160] :
                     (cur_count == 6'b000101) ? delay_pipeline[161] :
                     (cur_count == 6'b000110) ? delay_pipeline[162] :
                     (cur_count == 6'b000111) ? delay_pipeline[163] :
                     (cur_count == 6'b001000) ? delay_pipeline[164] :
                     (cur_count == 6'b001001) ? delay_pipeline[165] :
                     (cur_count == 6'b001010) ? delay_pipeline[166] :
                     (cur_count == 6'b001011) ? delay_pipeline[167] :
                     (cur_count == 6'b001100) ? delay_pipeline[168] :
                     (cur_count == 6'b001101) ? delay_pipeline[169] :
                     (cur_count == 6'b001110) ? delay_pipeline[170] :
                     (cur_count == 6'b001111) ? delay_pipeline[171] :
                     (cur_count == 6'b010000) ? delay_pipeline[172] :
                     (cur_count == 6'b010001) ? delay_pipeline[173] :
                     (cur_count == 6'b010010) ? delay_pipeline[174] :
                     (cur_count == 6'b010011) ? delay_pipeline[175] :
                     (cur_count == 6'b010100) ? delay_pipeline[176] :
                     (cur_count == 6'b010101) ? delay_pipeline[177] :
                     (cur_count == 6'b010110) ? delay_pipeline[179] :
                     (cur_count == 6'b010111) ? delay_pipeline[180] :
                     (cur_count == 6'b011000) ? delay_pipeline[181] :
                     (cur_count == 6'b011001) ? delay_pipeline[182] :
                     (cur_count == 6'b011010) ? delay_pipeline[183] :
                     (cur_count == 6'b011011) ? delay_pipeline[184] :
                     (cur_count == 6'b011100) ? delay_pipeline[185] :
                     (cur_count == 6'b011101) ? delay_pipeline[186] :
                     (cur_count == 6'b011110) ? delay_pipeline[187] :
                     (cur_count == 6'b011111) ? delay_pipeline[188] :
                     (cur_count == 6'b100000) ? delay_pipeline[189] :
                     (cur_count == 6'b100001) ? delay_pipeline[190] :
                     (cur_count == 6'b100010) ? delay_pipeline[191] :
                     (cur_count == 6'b100011) ? delay_pipeline[192] :
                     (cur_count == 6'b100100) ? delay_pipeline[193] :
                     (cur_count == 6'b100101) ? delay_pipeline[194] :
                     (cur_count == 6'b100110) ? delay_pipeline[195] :
                     (cur_count == 6'b100111) ? delay_pipeline[196] :
                     (cur_count == 6'b101000) ? delay_pipeline[197] :
                     (cur_count == 6'b101001) ? delay_pipeline[198] :
                     (cur_count == 6'b101010) ? delay_pipeline[199] :
                     (cur_count == 6'b101011) ? delay_pipeline[200] :
                     (cur_count == 6'b101100) ? delay_pipeline[201] :
                     (cur_count == 6'b101101) ? delay_pipeline[202] :
                     (cur_count == 6'b101110) ? delay_pipeline[204] :
                     (cur_count == 6'b101111) ? delay_pipeline[205] :
                     (cur_count == 6'b110000) ? delay_pipeline[206] :
                     delay_pipeline[207];

  assign inputmux_5 = (cur_count == 6'b000000) ? delay_pipeline[208] :
                     (cur_count == 6'b000001) ? delay_pipeline[209] :
                     (cur_count == 6'b000010) ? delay_pipeline[210] :
                     (cur_count == 6'b000011) ? delay_pipeline[211] :
                     (cur_count == 6'b000100) ? delay_pipeline[212] :
                     (cur_count == 6'b000101) ? delay_pipeline[213] :
                     (cur_count == 6'b000110) ? delay_pipeline[214] :
                     (cur_count == 6'b000111) ? delay_pipeline[215] :
                     (cur_count == 6'b001000) ? delay_pipeline[216] :
                     (cur_count == 6'b001001) ? delay_pipeline[217] :
                     (cur_count == 6'b001010) ? delay_pipeline[218] :
                     (cur_count == 6'b001011) ? delay_pipeline[219] :
                     (cur_count == 6'b001100) ? delay_pipeline[220] :
                     (cur_count == 6'b001101) ? delay_pipeline[221] :
                     (cur_count == 6'b001110) ? delay_pipeline[222] :
                     (cur_count == 6'b001111) ? delay_pipeline[223] :
                     (cur_count == 6'b010000) ? delay_pipeline[224] :
                     (cur_count == 6'b010001) ? delay_pipeline[225] :
                     (cur_count == 6'b010010) ? delay_pipeline[226] :
                     (cur_count == 6'b010011) ? delay_pipeline[227] :
                     (cur_count == 6'b010100) ? delay_pipeline[229] :
                     (cur_count == 6'b010101) ? delay_pipeline[230] :
                     (cur_count == 6'b010110) ? delay_pipeline[231] :
                     (cur_count == 6'b010111) ? delay_pipeline[232] :
                     (cur_count == 6'b011000) ? delay_pipeline[233] :
                     (cur_count == 6'b011001) ? delay_pipeline[234] :
                     (cur_count == 6'b011010) ? delay_pipeline[235] :
                     (cur_count == 6'b011011) ? delay_pipeline[236] :
                     (cur_count == 6'b011100) ? delay_pipeline[237] :
                     (cur_count == 6'b011101) ? delay_pipeline[238] :
                     (cur_count == 6'b011110) ? delay_pipeline[239] :
                     (cur_count == 6'b011111) ? delay_pipeline[240] :
                     (cur_count == 6'b100000) ? delay_pipeline[241] :
                     (cur_count == 6'b100001) ? delay_pipeline[242] :
                     (cur_count == 6'b100010) ? delay_pipeline[243] :
                     (cur_count == 6'b100011) ? delay_pipeline[244] :
                     (cur_count == 6'b100100) ? delay_pipeline[245] :
                     (cur_count == 6'b100101) ? delay_pipeline[246] :
                     (cur_count == 6'b100110) ? delay_pipeline[247] :
                     (cur_count == 6'b100111) ? delay_pipeline[248] :
                     (cur_count == 6'b101000) ? delay_pipeline[249] :
                     (cur_count == 6'b101001) ? delay_pipeline[250] :
                     (cur_count == 6'b101010) ? delay_pipeline[251] :
                     (cur_count == 6'b101011) ? delay_pipeline[252] :
                     (cur_count == 6'b101100) ? delay_pipeline[254] :
                     (cur_count == 6'b101101) ? delay_pipeline[255] :
                     delay_pipeline[256];

  //   ------------------ Serial partition # 1 ------------------

  assign product_1_mux = (cur_count == 6'b000000) ? coeff1 :
                        (cur_count == 6'b000001) ? coeff2 :
                        (cur_count == 6'b000010) ? coeff3 :
                        (cur_count == 6'b000011) ? coeff5 :
                        (cur_count == 6'b000100) ? coeff6 :
                        (cur_count == 6'b000101) ? coeff7 :
                        (cur_count == 6'b000110) ? coeff8 :
                        (cur_count == 6'b000111) ? coeff9 :
                        (cur_count == 6'b001000) ? coeff10 :
                        (cur_count == 6'b001001) ? coeff11 :
                        (cur_count == 6'b001010) ? coeff12 :
                        (cur_count == 6'b001011) ? coeff13 :
                        (cur_count == 6'b001100) ? coeff14 :
                        (cur_count == 6'b001101) ? coeff15 :
                        (cur_count == 6'b001110) ? coeff16 :
                        (cur_count == 6'b001111) ? coeff17 :
                        (cur_count == 6'b010000) ? coeff18 :
                        (cur_count == 6'b010001) ? coeff19 :
                        (cur_count == 6'b010010) ? coeff20 :
                        (cur_count == 6'b010011) ? coeff21 :
                        (cur_count == 6'b010100) ? coeff22 :
                        (cur_count == 6'b010101) ? coeff23 :
                        (cur_count == 6'b010110) ? coeff24 :
                        (cur_count == 6'b010111) ? coeff25 :
                        (cur_count == 6'b011000) ? coeff26 :
                        (cur_count == 6'b011001) ? coeff27 :
                        (cur_count == 6'b011010) ? coeff28 :
                        (cur_count == 6'b011011) ? coeff30 :
                        (cur_count == 6'b011100) ? coeff31 :
                        (cur_count == 6'b011101) ? coeff32 :
                        (cur_count == 6'b011110) ? coeff33 :
                        (cur_count == 6'b011111) ? coeff34 :
                        (cur_count == 6'b100000) ? coeff35 :
                        (cur_count == 6'b100001) ? coeff36 :
                        (cur_count == 6'b100010) ? coeff37 :
                        (cur_count == 6'b100011) ? coeff38 :
                        (cur_count == 6'b100100) ? coeff39 :
                        (cur_count == 6'b100101) ? coeff40 :
                        (cur_count == 6'b100110) ? coeff41 :
                        (cur_count == 6'b100111) ? coeff42 :
                        (cur_count == 6'b101000) ? coeff43 :
                        (cur_count == 6'b101001) ? coeff44 :
                        (cur_count == 6'b101010) ? coeff45 :
                        (cur_count == 6'b101011) ? coeff46 :
                        (cur_count == 6'b101100) ? coeff47 :
                        (cur_count == 6'b101101) ? coeff48 :
                        (cur_count == 6'b101110) ? coeff49 :
                        (cur_count == 6'b101111) ? coeff50 :
                        (cur_count == 6'b110000) ? coeff51 :
                        coeff52;
  assign mul_temp = inputmux_1 * product_1_mux;
  assign product_1 = mul_temp[54:0];

  assign prod_typeconvert_1 = $signed({{2{product_1[54]}}, product_1});

  assign add_signext = prod_typeconvert_1;
  assign add_signext_1 = acc_out_1;
  assign add_temp = add_signext + add_signext_1;
  assign acc_sum_1 = add_temp[56:0];

  assign acc_in_1 = (phase_0 == 1'b1) ? prod_typeconvert_1 :
                   acc_sum_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  //   ------------------ Serial partition # 2 ------------------

  assign product_2_mux = (cur_count == 6'b000000) ? coeff53 :
                        (cur_count == 6'b000001) ? coeff55 :
                        (cur_count == 6'b000010) ? coeff56 :
                        (cur_count == 6'b000011) ? coeff57 :
                        (cur_count == 6'b000100) ? coeff58 :
                        (cur_count == 6'b000101) ? coeff59 :
                        (cur_count == 6'b000110) ? coeff60 :
                        (cur_count == 6'b000111) ? coeff61 :
                        (cur_count == 6'b001000) ? coeff62 :
                        (cur_count == 6'b001001) ? coeff63 :
                        (cur_count == 6'b001010) ? coeff64 :
                        (cur_count == 6'b001011) ? coeff65 :
                        (cur_count == 6'b001100) ? coeff66 :
                        (cur_count == 6'b001101) ? coeff67 :
                        (cur_count == 6'b001110) ? coeff68 :
                        (cur_count == 6'b001111) ? coeff69 :
                        (cur_count == 6'b010000) ? coeff70 :
                        (cur_count == 6'b010001) ? coeff71 :
                        (cur_count == 6'b010010) ? coeff72 :
                        (cur_count == 6'b010011) ? coeff73 :
                        (cur_count == 6'b010100) ? coeff74 :
                        (cur_count == 6'b010101) ? coeff75 :
                        (cur_count == 6'b010110) ? coeff76 :
                        (cur_count == 6'b010111) ? coeff77 :
                        (cur_count == 6'b011000) ? coeff78 :
                        (cur_count == 6'b011001) ? coeff80 :
                        (cur_count == 6'b011010) ? coeff81 :
                        (cur_count == 6'b011011) ? coeff82 :
                        (cur_count == 6'b011100) ? coeff83 :
                        (cur_count == 6'b011101) ? coeff84 :
                        (cur_count == 6'b011110) ? coeff85 :
                        (cur_count == 6'b011111) ? coeff86 :
                        (cur_count == 6'b100000) ? coeff87 :
                        (cur_count == 6'b100001) ? coeff88 :
                        (cur_count == 6'b100010) ? coeff89 :
                        (cur_count == 6'b100011) ? coeff90 :
                        (cur_count == 6'b100100) ? coeff91 :
                        (cur_count == 6'b100101) ? coeff92 :
                        (cur_count == 6'b100110) ? coeff93 :
                        (cur_count == 6'b100111) ? coeff94 :
                        (cur_count == 6'b101000) ? coeff95 :
                        (cur_count == 6'b101001) ? coeff96 :
                        (cur_count == 6'b101010) ? coeff97 :
                        (cur_count == 6'b101011) ? coeff98 :
                        (cur_count == 6'b101100) ? coeff99 :
                        (cur_count == 6'b101101) ? coeff100 :
                        (cur_count == 6'b101110) ? coeff101 :
                        (cur_count == 6'b101111) ? coeff102 :
                        (cur_count == 6'b110000) ? coeff103 :
                        coeff105;
  assign mul_temp_1 = inputmux_2 * product_2_mux;
  assign product_2 = mul_temp_1[54:0];

  assign prod_typeconvert_2 = $signed({{2{product_2[54]}}, product_2});

  assign add_signext_2 = prod_typeconvert_2;
  assign add_signext_3 = acc_out_2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign acc_sum_2 = add_temp_1[56:0];

  assign acc_in_2 = (phase_0 == 1'b1) ? prod_typeconvert_2 :
                   acc_sum_2;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_2_process
      if (reset == 1'b1) begin
        acc_out_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_2 <= acc_in_2;
        end
      end
    end // Acc_reg_2_process

  //   ------------------ Serial partition # 3 ------------------

  assign product_3_mux = (cur_count == 6'b000000) ? coeff106 :
                        (cur_count == 6'b000001) ? coeff107 :
                        (cur_count == 6'b000010) ? coeff108 :
                        (cur_count == 6'b000011) ? coeff109 :
                        (cur_count == 6'b000100) ? coeff110 :
                        (cur_count == 6'b000101) ? coeff111 :
                        (cur_count == 6'b000110) ? coeff112 :
                        (cur_count == 6'b000111) ? coeff113 :
                        (cur_count == 6'b001000) ? coeff114 :
                        (cur_count == 6'b001001) ? coeff115 :
                        (cur_count == 6'b001010) ? coeff116 :
                        (cur_count == 6'b001011) ? coeff117 :
                        (cur_count == 6'b001100) ? coeff118 :
                        (cur_count == 6'b001101) ? coeff119 :
                        (cur_count == 6'b001110) ? coeff120 :
                        (cur_count == 6'b001111) ? coeff121 :
                        (cur_count == 6'b010000) ? coeff122 :
                        (cur_count == 6'b010001) ? coeff123 :
                        (cur_count == 6'b010010) ? coeff124 :
                        (cur_count == 6'b010011) ? coeff125 :
                        (cur_count == 6'b010100) ? coeff126 :
                        (cur_count == 6'b010101) ? coeff127 :
                        (cur_count == 6'b010110) ? coeff128 :
                        (cur_count == 6'b010111) ? coeff129 :
                        (cur_count == 6'b011000) ? coeff130 :
                        (cur_count == 6'b011001) ? coeff131 :
                        (cur_count == 6'b011010) ? coeff132 :
                        (cur_count == 6'b011011) ? coeff133 :
                        (cur_count == 6'b011100) ? coeff134 :
                        (cur_count == 6'b011101) ? coeff135 :
                        (cur_count == 6'b011110) ? coeff136 :
                        (cur_count == 6'b011111) ? coeff137 :
                        (cur_count == 6'b100000) ? coeff138 :
                        (cur_count == 6'b100001) ? coeff139 :
                        (cur_count == 6'b100010) ? coeff140 :
                        (cur_count == 6'b100011) ? coeff141 :
                        (cur_count == 6'b100100) ? coeff142 :
                        (cur_count == 6'b100101) ? coeff143 :
                        (cur_count == 6'b100110) ? coeff144 :
                        (cur_count == 6'b100111) ? coeff145 :
                        (cur_count == 6'b101000) ? coeff146 :
                        (cur_count == 6'b101001) ? coeff147 :
                        (cur_count == 6'b101010) ? coeff148 :
                        (cur_count == 6'b101011) ? coeff149 :
                        (cur_count == 6'b101100) ? coeff150 :
                        (cur_count == 6'b101101) ? coeff151 :
                        (cur_count == 6'b101110) ? coeff152 :
                        (cur_count == 6'b101111) ? coeff153 :
                        (cur_count == 6'b110000) ? coeff155 :
                        coeff156;
  assign mul_temp_2 = inputmux_3 * product_3_mux;
  assign product_3 = mul_temp_2[54:0];

  assign prod_typeconvert_3 = $signed({{2{product_3[54]}}, product_3});

  assign add_signext_4 = prod_typeconvert_3;
  assign add_signext_5 = acc_out_3;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign acc_sum_3 = add_temp_2[56:0];

  assign acc_in_3 = (phase_0 == 1'b1) ? prod_typeconvert_3 :
                   acc_sum_3;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_3_process
      if (reset == 1'b1) begin
        acc_out_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_3 <= acc_in_3;
        end
      end
    end // Acc_reg_3_process

  //   ------------------ Serial partition # 4 ------------------

  assign product_4_mux = (cur_count == 6'b000000) ? coeff157 :
                        (cur_count == 6'b000001) ? coeff158 :
                        (cur_count == 6'b000010) ? coeff159 :
                        (cur_count == 6'b000011) ? coeff160 :
                        (cur_count == 6'b000100) ? coeff161 :
                        (cur_count == 6'b000101) ? coeff162 :
                        (cur_count == 6'b000110) ? coeff163 :
                        (cur_count == 6'b000111) ? coeff164 :
                        (cur_count == 6'b001000) ? coeff165 :
                        (cur_count == 6'b001001) ? coeff166 :
                        (cur_count == 6'b001010) ? coeff167 :
                        (cur_count == 6'b001011) ? coeff168 :
                        (cur_count == 6'b001100) ? coeff169 :
                        (cur_count == 6'b001101) ? coeff170 :
                        (cur_count == 6'b001110) ? coeff171 :
                        (cur_count == 6'b001111) ? coeff172 :
                        (cur_count == 6'b010000) ? coeff173 :
                        (cur_count == 6'b010001) ? coeff174 :
                        (cur_count == 6'b010010) ? coeff175 :
                        (cur_count == 6'b010011) ? coeff176 :
                        (cur_count == 6'b010100) ? coeff177 :
                        (cur_count == 6'b010101) ? coeff178 :
                        (cur_count == 6'b010110) ? coeff180 :
                        (cur_count == 6'b010111) ? coeff181 :
                        (cur_count == 6'b011000) ? coeff182 :
                        (cur_count == 6'b011001) ? coeff183 :
                        (cur_count == 6'b011010) ? coeff184 :
                        (cur_count == 6'b011011) ? coeff185 :
                        (cur_count == 6'b011100) ? coeff186 :
                        (cur_count == 6'b011101) ? coeff187 :
                        (cur_count == 6'b011110) ? coeff188 :
                        (cur_count == 6'b011111) ? coeff189 :
                        (cur_count == 6'b100000) ? coeff190 :
                        (cur_count == 6'b100001) ? coeff191 :
                        (cur_count == 6'b100010) ? coeff192 :
                        (cur_count == 6'b100011) ? coeff193 :
                        (cur_count == 6'b100100) ? coeff194 :
                        (cur_count == 6'b100101) ? coeff195 :
                        (cur_count == 6'b100110) ? coeff196 :
                        (cur_count == 6'b100111) ? coeff197 :
                        (cur_count == 6'b101000) ? coeff198 :
                        (cur_count == 6'b101001) ? coeff199 :
                        (cur_count == 6'b101010) ? coeff200 :
                        (cur_count == 6'b101011) ? coeff201 :
                        (cur_count == 6'b101100) ? coeff202 :
                        (cur_count == 6'b101101) ? coeff203 :
                        (cur_count == 6'b101110) ? coeff205 :
                        (cur_count == 6'b101111) ? coeff206 :
                        (cur_count == 6'b110000) ? coeff207 :
                        coeff208;
  assign mul_temp_3 = inputmux_4 * product_4_mux;
  assign product_4 = mul_temp_3[54:0];

  assign prod_typeconvert_4 = $signed({{2{product_4[54]}}, product_4});

  assign add_signext_6 = prod_typeconvert_4;
  assign add_signext_7 = acc_out_4;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign acc_sum_4 = add_temp_3[56:0];

  assign acc_in_4 = (phase_0 == 1'b1) ? prod_typeconvert_4 :
                   acc_sum_4;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_4_process
      if (reset == 1'b1) begin
        acc_out_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_4 <= acc_in_4;
        end
      end
    end // Acc_reg_4_process

  //   ------------------ Serial partition # 5 ------------------

  assign product_5_mux = (cur_count == 6'b000000) ? coeff209 :
                        (cur_count == 6'b000001) ? coeff210 :
                        (cur_count == 6'b000010) ? coeff211 :
                        (cur_count == 6'b000011) ? coeff212 :
                        (cur_count == 6'b000100) ? coeff213 :
                        (cur_count == 6'b000101) ? coeff214 :
                        (cur_count == 6'b000110) ? coeff215 :
                        (cur_count == 6'b000111) ? coeff216 :
                        (cur_count == 6'b001000) ? coeff217 :
                        (cur_count == 6'b001001) ? coeff218 :
                        (cur_count == 6'b001010) ? coeff219 :
                        (cur_count == 6'b001011) ? coeff220 :
                        (cur_count == 6'b001100) ? coeff221 :
                        (cur_count == 6'b001101) ? coeff222 :
                        (cur_count == 6'b001110) ? coeff223 :
                        (cur_count == 6'b001111) ? coeff224 :
                        (cur_count == 6'b010000) ? coeff225 :
                        (cur_count == 6'b010001) ? coeff226 :
                        (cur_count == 6'b010010) ? coeff227 :
                        (cur_count == 6'b010011) ? coeff228 :
                        (cur_count == 6'b010100) ? coeff230 :
                        (cur_count == 6'b010101) ? coeff231 :
                        (cur_count == 6'b010110) ? coeff232 :
                        (cur_count == 6'b010111) ? coeff233 :
                        (cur_count == 6'b011000) ? coeff234 :
                        (cur_count == 6'b011001) ? coeff235 :
                        (cur_count == 6'b011010) ? coeff236 :
                        (cur_count == 6'b011011) ? coeff237 :
                        (cur_count == 6'b011100) ? coeff238 :
                        (cur_count == 6'b011101) ? coeff239 :
                        (cur_count == 6'b011110) ? coeff240 :
                        (cur_count == 6'b011111) ? coeff241 :
                        (cur_count == 6'b100000) ? coeff242 :
                        (cur_count == 6'b100001) ? coeff243 :
                        (cur_count == 6'b100010) ? coeff244 :
                        (cur_count == 6'b100011) ? coeff245 :
                        (cur_count == 6'b100100) ? coeff246 :
                        (cur_count == 6'b100101) ? coeff247 :
                        (cur_count == 6'b100110) ? coeff248 :
                        (cur_count == 6'b100111) ? coeff249 :
                        (cur_count == 6'b101000) ? coeff250 :
                        (cur_count == 6'b101001) ? coeff251 :
                        (cur_count == 6'b101010) ? coeff252 :
                        (cur_count == 6'b101011) ? coeff253 :
                        (cur_count == 6'b101100) ? coeff255 :
                        (cur_count == 6'b101101) ? coeff256 :
                        coeff257;
  assign mul_temp_4 = inputmux_5 * product_5_mux;
  assign product_5 = mul_temp_4[54:0];

  assign prod_typeconvert_5 = $signed({{2{product_5[54]}}, product_5});

  assign add_signext_8 = prod_typeconvert_5;
  assign add_signext_9 = acc_out_5;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign acc_sum_5 = add_temp_4[56:0];

  assign acc_in_5 = (phase_0 == 1'b1) ? prod_typeconvert_5 :
                   acc_sum_5;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_5_process
      if (reset == 1'b1) begin
        acc_out_5 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          acc_out_5 <= acc_in_5;
        end
      end
    end // Acc_reg_5_process

  assign add_signext_10 = acc_out_5;
  assign add_signext_11 = acc_out_4;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum1 = add_temp_5[56:0];

  assign add_signext_12 = sum1;
  assign add_signext_13 = acc_out_3;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum2 = add_temp_6[56:0];

  assign add_signext_14 = sum2;
  assign add_signext_15 = acc_out_2;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum3 = add_temp_7[56:0];

  assign add_signext_16 = sum3;
  assign add_signext_17 = acc_out_1;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum4 = add_temp_8[56:0];

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= sum4;
        end
      end
    end // Finalsum_reg_process

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_49 == 1'b1) begin
          output_register <= acc_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // HPF_256
