// -------------------------------------------------------------
//
// Module: LPF_128
// Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
// Generated on: 2021-08-08 09:09:08
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetDirectory: I:\PractiseProject\_Vivado_projects\audio_FM\audio_FM.srcs\sources_1\new
// Name: LPF_128
// SerialPartition: [50  50  27]
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Partly Serial
// Folding Factor        : 50
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 129
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s15,18 -> [-6.250000e-02 6.250000e-02)
// Input             : s16,0 -> [-32768 32768)
// Filter Internals  : Full Precision
//   Output          : s35,18 -> [-65536 65536)  (auto determined)
//   Product         : s30,18 -> [-2048 2048)  (auto determined)
//   Accumulator     : s35,18 -> [-65536 65536)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module LPF_128
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16
  output  signed [34:0] filter_out; //sfix35_En18

////////////////////////////////////////////////////////////////
//Module Architecture: LPF_128
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [14:0] coeff1 = 15'b111111111001110; //sfix15_En18
  parameter signed [14:0] coeff2 = 15'b111111110111100; //sfix15_En18
  parameter signed [14:0] coeff3 = 15'b111111110101011; //sfix15_En18
  parameter signed [14:0] coeff4 = 15'b111111110011010; //sfix15_En18
  parameter signed [14:0] coeff5 = 15'b111111110001010; //sfix15_En18
  parameter signed [14:0] coeff6 = 15'b111111101111100; //sfix15_En18
  parameter signed [14:0] coeff7 = 15'b111111101110000; //sfix15_En18
  parameter signed [14:0] coeff8 = 15'b111111101101000; //sfix15_En18
  parameter signed [14:0] coeff9 = 15'b111111101100101; //sfix15_En18
  parameter signed [14:0] coeff10 = 15'b111111101100111; //sfix15_En18
  parameter signed [14:0] coeff11 = 15'b111111101110010; //sfix15_En18
  parameter signed [14:0] coeff12 = 15'b111111110000101; //sfix15_En18
  parameter signed [14:0] coeff13 = 15'b111111110100011; //sfix15_En18
  parameter signed [14:0] coeff14 = 15'b111111111001100; //sfix15_En18
  parameter signed [14:0] coeff15 = 15'b000000000000000; //sfix15_En18
  parameter signed [14:0] coeff16 = 15'b000000001000000; //sfix15_En18
  parameter signed [14:0] coeff17 = 15'b000000010001010; //sfix15_En18
  parameter signed [14:0] coeff18 = 15'b000000011011100; //sfix15_En18
  parameter signed [14:0] coeff19 = 15'b000000100110101; //sfix15_En18
  parameter signed [14:0] coeff20 = 15'b000000110010000; //sfix15_En18
  parameter signed [14:0] coeff21 = 15'b000000111101001; //sfix15_En18
  parameter signed [14:0] coeff22 = 15'b000001000111100; //sfix15_En18
  parameter signed [14:0] coeff23 = 15'b000001010000010; //sfix15_En18
  parameter signed [14:0] coeff24 = 15'b000001010110111; //sfix15_En18
  parameter signed [14:0] coeff25 = 15'b000001011010100; //sfix15_En18
  parameter signed [14:0] coeff26 = 15'b000001011010100; //sfix15_En18
  parameter signed [14:0] coeff27 = 15'b000001010110001; //sfix15_En18
  parameter signed [14:0] coeff28 = 15'b000001001101001; //sfix15_En18
  parameter signed [14:0] coeff29 = 15'b000000111111000; //sfix15_En18
  parameter signed [14:0] coeff30 = 15'b000000101011101; //sfix15_En18
  parameter signed [14:0] coeff31 = 15'b000000010011001; //sfix15_En18
  parameter signed [14:0] coeff32 = 15'b111111110101110; //sfix15_En18
  parameter signed [14:0] coeff33 = 15'b111111010100001; //sfix15_En18
  parameter signed [14:0] coeff34 = 15'b111110101111010; //sfix15_En18
  parameter signed [14:0] coeff35 = 15'b111110001000001; //sfix15_En18
  parameter signed [14:0] coeff36 = 15'b111101100000011; //sfix15_En18
  parameter signed [14:0] coeff37 = 15'b111100111001100; //sfix15_En18
  parameter signed [14:0] coeff38 = 15'b111100010101011; //sfix15_En18
  parameter signed [14:0] coeff39 = 15'b111011110110000; //sfix15_En18
  parameter signed [14:0] coeff40 = 15'b111011011101011; //sfix15_En18
  parameter signed [14:0] coeff41 = 15'b111011001101101; //sfix15_En18
  parameter signed [14:0] coeff42 = 15'b111011001000101; //sfix15_En18
  parameter signed [14:0] coeff43 = 15'b111011010000010; //sfix15_En18
  parameter signed [14:0] coeff44 = 15'b111011100110001; //sfix15_En18
  parameter signed [14:0] coeff45 = 15'b111100001011100; //sfix15_En18
  parameter signed [14:0] coeff46 = 15'b111101000001010; //sfix15_En18
  parameter signed [14:0] coeff47 = 15'b111110000111111; //sfix15_En18
  parameter signed [14:0] coeff48 = 15'b111111011111010; //sfix15_En18
  parameter signed [14:0] coeff49 = 15'b000001000110111; //sfix15_En18
  parameter signed [14:0] coeff50 = 15'b000010111101110; //sfix15_En18
  parameter signed [14:0] coeff51 = 15'b000101000010010; //sfix15_En18
  parameter signed [14:0] coeff52 = 15'b000111010010010; //sfix15_En18
  parameter signed [14:0] coeff53 = 15'b001001101011011; //sfix15_En18
  parameter signed [14:0] coeff54 = 15'b001100001010100; //sfix15_En18
  parameter signed [14:0] coeff55 = 15'b001110101100011; //sfix15_En18
  parameter signed [14:0] coeff56 = 15'b010001001101110; //sfix15_En18
  parameter signed [14:0] coeff57 = 15'b010011101010110; //sfix15_En18
  parameter signed [14:0] coeff58 = 15'b010101111111111; //sfix15_En18
  parameter signed [14:0] coeff59 = 15'b011000001001100; //sfix15_En18
  parameter signed [14:0] coeff60 = 15'b011010000100100; //sfix15_En18
  parameter signed [14:0] coeff61 = 15'b011011101101101; //sfix15_En18
  parameter signed [14:0] coeff62 = 15'b011101000010010; //sfix15_En18
  parameter signed [14:0] coeff63 = 15'b011110000000010; //sfix15_En18
  parameter signed [14:0] coeff64 = 15'b011110100110001; //sfix15_En18
  parameter signed [14:0] coeff65 = 15'b011110110010111; //sfix15_En18
  parameter signed [14:0] coeff66 = 15'b011110100110001; //sfix15_En18
  parameter signed [14:0] coeff67 = 15'b011110000000010; //sfix15_En18
  parameter signed [14:0] coeff68 = 15'b011101000010010; //sfix15_En18
  parameter signed [14:0] coeff69 = 15'b011011101101101; //sfix15_En18
  parameter signed [14:0] coeff70 = 15'b011010000100100; //sfix15_En18
  parameter signed [14:0] coeff71 = 15'b011000001001100; //sfix15_En18
  parameter signed [14:0] coeff72 = 15'b010101111111111; //sfix15_En18
  parameter signed [14:0] coeff73 = 15'b010011101010110; //sfix15_En18
  parameter signed [14:0] coeff74 = 15'b010001001101110; //sfix15_En18
  parameter signed [14:0] coeff75 = 15'b001110101100011; //sfix15_En18
  parameter signed [14:0] coeff76 = 15'b001100001010100; //sfix15_En18
  parameter signed [14:0] coeff77 = 15'b001001101011011; //sfix15_En18
  parameter signed [14:0] coeff78 = 15'b000111010010010; //sfix15_En18
  parameter signed [14:0] coeff79 = 15'b000101000010010; //sfix15_En18
  parameter signed [14:0] coeff80 = 15'b000010111101110; //sfix15_En18
  parameter signed [14:0] coeff81 = 15'b000001000110111; //sfix15_En18
  parameter signed [14:0] coeff82 = 15'b111111011111010; //sfix15_En18
  parameter signed [14:0] coeff83 = 15'b111110000111111; //sfix15_En18
  parameter signed [14:0] coeff84 = 15'b111101000001010; //sfix15_En18
  parameter signed [14:0] coeff85 = 15'b111100001011100; //sfix15_En18
  parameter signed [14:0] coeff86 = 15'b111011100110001; //sfix15_En18
  parameter signed [14:0] coeff87 = 15'b111011010000010; //sfix15_En18
  parameter signed [14:0] coeff88 = 15'b111011001000101; //sfix15_En18
  parameter signed [14:0] coeff89 = 15'b111011001101101; //sfix15_En18
  parameter signed [14:0] coeff90 = 15'b111011011101011; //sfix15_En18
  parameter signed [14:0] coeff91 = 15'b111011110110000; //sfix15_En18
  parameter signed [14:0] coeff92 = 15'b111100010101011; //sfix15_En18
  parameter signed [14:0] coeff93 = 15'b111100111001100; //sfix15_En18
  parameter signed [14:0] coeff94 = 15'b111101100000011; //sfix15_En18
  parameter signed [14:0] coeff95 = 15'b111110001000001; //sfix15_En18
  parameter signed [14:0] coeff96 = 15'b111110101111010; //sfix15_En18
  parameter signed [14:0] coeff97 = 15'b111111010100001; //sfix15_En18
  parameter signed [14:0] coeff98 = 15'b111111110101110; //sfix15_En18
  parameter signed [14:0] coeff99 = 15'b000000010011001; //sfix15_En18
  parameter signed [14:0] coeff100 = 15'b000000101011101; //sfix15_En18
  parameter signed [14:0] coeff101 = 15'b000000111111000; //sfix15_En18
  parameter signed [14:0] coeff102 = 15'b000001001101001; //sfix15_En18
  parameter signed [14:0] coeff103 = 15'b000001010110001; //sfix15_En18
  parameter signed [14:0] coeff104 = 15'b000001011010100; //sfix15_En18
  parameter signed [14:0] coeff105 = 15'b000001011010100; //sfix15_En18
  parameter signed [14:0] coeff106 = 15'b000001010110111; //sfix15_En18
  parameter signed [14:0] coeff107 = 15'b000001010000010; //sfix15_En18
  parameter signed [14:0] coeff108 = 15'b000001000111100; //sfix15_En18
  parameter signed [14:0] coeff109 = 15'b000000111101001; //sfix15_En18
  parameter signed [14:0] coeff110 = 15'b000000110010000; //sfix15_En18
  parameter signed [14:0] coeff111 = 15'b000000100110101; //sfix15_En18
  parameter signed [14:0] coeff112 = 15'b000000011011100; //sfix15_En18
  parameter signed [14:0] coeff113 = 15'b000000010001010; //sfix15_En18
  parameter signed [14:0] coeff114 = 15'b000000001000000; //sfix15_En18
  parameter signed [14:0] coeff115 = 15'b000000000000000; //sfix15_En18
  parameter signed [14:0] coeff116 = 15'b111111111001100; //sfix15_En18
  parameter signed [14:0] coeff117 = 15'b111111110100011; //sfix15_En18
  parameter signed [14:0] coeff118 = 15'b111111110000101; //sfix15_En18
  parameter signed [14:0] coeff119 = 15'b111111101110010; //sfix15_En18
  parameter signed [14:0] coeff120 = 15'b111111101100111; //sfix15_En18
  parameter signed [14:0] coeff121 = 15'b111111101100101; //sfix15_En18
  parameter signed [14:0] coeff122 = 15'b111111101101000; //sfix15_En18
  parameter signed [14:0] coeff123 = 15'b111111101110000; //sfix15_En18
  parameter signed [14:0] coeff124 = 15'b111111101111100; //sfix15_En18
  parameter signed [14:0] coeff125 = 15'b111111110001010; //sfix15_En18
  parameter signed [14:0] coeff126 = 15'b111111110011010; //sfix15_En18
  parameter signed [14:0] coeff127 = 15'b111111110101011; //sfix15_En18
  parameter signed [14:0] coeff128 = 15'b111111110111100; //sfix15_En18
  parameter signed [14:0] coeff129 = 15'b111111111001110; //sfix15_En18

  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_49; // boolean
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  signed [15:0] delay_pipeline [0:128] ; // sfix16
  wire signed [15:0] inputmux_1; // sfix16
  wire signed [15:0] inputmux_2; // sfix16
  wire signed [15:0] inputmux_3; // sfix16
  reg  signed [34:0] acc_final; // sfix35_En18
  reg  signed [34:0] acc_out_1; // sfix35_En18
  wire signed [29:0] product_1; // sfix30_En18
  wire signed [14:0] product_1_mux; // sfix15_En18
  wire signed [30:0] mul_temp; // sfix31_En18
  wire signed [34:0] prod_typeconvert_1; // sfix35_En18
  wire signed [34:0] acc_sum_1; // sfix35_En18
  wire signed [34:0] acc_in_1; // sfix35_En18
  wire signed [34:0] add_signext; // sfix35_En18
  wire signed [34:0] add_signext_1; // sfix35_En18
  wire signed [35:0] add_temp; // sfix36_En18
  reg  signed [34:0] acc_out_2; // sfix35_En18
  wire signed [29:0] product_2; // sfix30_En18
  wire signed [14:0] product_2_mux; // sfix15_En18
  wire signed [30:0] mul_temp_1; // sfix31_En18
  wire signed [34:0] prod_typeconvert_2; // sfix35_En18
  wire signed [34:0] acc_sum_2; // sfix35_En18
  wire signed [34:0] acc_in_2; // sfix35_En18
  wire signed [34:0] add_signext_2; // sfix35_En18
  wire signed [34:0] add_signext_3; // sfix35_En18
  wire signed [35:0] add_temp_1; // sfix36_En18
  reg  signed [34:0] acc_out_3; // sfix35_En18
  wire signed [29:0] product_3; // sfix30_En18
  wire signed [14:0] product_3_mux; // sfix15_En18
  wire signed [30:0] mul_temp_2; // sfix31_En18
  wire signed [34:0] prod_typeconvert_3; // sfix35_En18
  wire signed [34:0] acc_sum_3; // sfix35_En18
  wire signed [34:0] acc_in_3; // sfix35_En18
  wire signed [34:0] add_signext_4; // sfix35_En18
  wire signed [34:0] add_signext_5; // sfix35_En18
  wire signed [35:0] add_temp_2; // sfix36_En18
  wire signed [34:0] sum1; // sfix35_En18
  wire signed [34:0] add_signext_6; // sfix35_En18
  wire signed [34:0] add_signext_7; // sfix35_En18
  wire signed [35:0] add_temp_3; // sfix36_En18
  wire signed [34:0] sum2; // sfix35_En18
  wire signed [34:0] add_signext_8; // sfix35_En18
  wire signed [34:0] add_signext_9; // sfix35_En18
  wire signed [35:0] add_temp_4; // sfix36_En18
  reg  signed [34:0] output_register; // sfix35_En18

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 6'b110001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 6'b110001) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 6'b000001;
          end
        end
      end
    end // Counter_process

  assign  phase_49 = (cur_count == 6'b110001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_1 = (((cur_count == 6'b000000) ||
                     (cur_count == 6'b000001)  ||
                     (cur_count == 6'b000010)  ||
                     (cur_count == 6'b000011)  ||
                     (cur_count == 6'b000100)  ||
                     (cur_count == 6'b000101)  ||
                     (cur_count == 6'b000110)  ||
                     (cur_count == 6'b000111)  ||
                     (cur_count == 6'b001000)  ||
                     (cur_count == 6'b001001)  ||
                     (cur_count == 6'b001010)  ||
                     (cur_count == 6'b001011)  ||
                     (cur_count == 6'b001100)  ||
                     (cur_count == 6'b001101)  ||
                     (cur_count == 6'b001110)  ||
                     (cur_count == 6'b001111)  ||
                     (cur_count == 6'b010000)  ||
                     (cur_count == 6'b010001)  ||
                     (cur_count == 6'b010010)  ||
                     (cur_count == 6'b010011)  ||
                     (cur_count == 6'b010100)  ||
                     (cur_count == 6'b010101)  ||
                     (cur_count == 6'b010110)  ||
                     (cur_count == 6'b010111)  ||
                     (cur_count == 6'b011000)  ||
                     (cur_count == 6'b011001)  ||
                     (cur_count == 6'b011010)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
        delay_pipeline[66] <= 0;
        delay_pipeline[67] <= 0;
        delay_pipeline[68] <= 0;
        delay_pipeline[69] <= 0;
        delay_pipeline[70] <= 0;
        delay_pipeline[71] <= 0;
        delay_pipeline[72] <= 0;
        delay_pipeline[73] <= 0;
        delay_pipeline[74] <= 0;
        delay_pipeline[75] <= 0;
        delay_pipeline[76] <= 0;
        delay_pipeline[77] <= 0;
        delay_pipeline[78] <= 0;
        delay_pipeline[79] <= 0;
        delay_pipeline[80] <= 0;
        delay_pipeline[81] <= 0;
        delay_pipeline[82] <= 0;
        delay_pipeline[83] <= 0;
        delay_pipeline[84] <= 0;
        delay_pipeline[85] <= 0;
        delay_pipeline[86] <= 0;
        delay_pipeline[87] <= 0;
        delay_pipeline[88] <= 0;
        delay_pipeline[89] <= 0;
        delay_pipeline[90] <= 0;
        delay_pipeline[91] <= 0;
        delay_pipeline[92] <= 0;
        delay_pipeline[93] <= 0;
        delay_pipeline[94] <= 0;
        delay_pipeline[95] <= 0;
        delay_pipeline[96] <= 0;
        delay_pipeline[97] <= 0;
        delay_pipeline[98] <= 0;
        delay_pipeline[99] <= 0;
        delay_pipeline[100] <= 0;
        delay_pipeline[101] <= 0;
        delay_pipeline[102] <= 0;
        delay_pipeline[103] <= 0;
        delay_pipeline[104] <= 0;
        delay_pipeline[105] <= 0;
        delay_pipeline[106] <= 0;
        delay_pipeline[107] <= 0;
        delay_pipeline[108] <= 0;
        delay_pipeline[109] <= 0;
        delay_pipeline[110] <= 0;
        delay_pipeline[111] <= 0;
        delay_pipeline[112] <= 0;
        delay_pipeline[113] <= 0;
        delay_pipeline[114] <= 0;
        delay_pipeline[115] <= 0;
        delay_pipeline[116] <= 0;
        delay_pipeline[117] <= 0;
        delay_pipeline[118] <= 0;
        delay_pipeline[119] <= 0;
        delay_pipeline[120] <= 0;
        delay_pipeline[121] <= 0;
        delay_pipeline[122] <= 0;
        delay_pipeline[123] <= 0;
        delay_pipeline[124] <= 0;
        delay_pipeline[125] <= 0;
        delay_pipeline[126] <= 0;
        delay_pipeline[127] <= 0;
        delay_pipeline[128] <= 0;
      end
      else begin
        if (phase_49 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
          delay_pipeline[107] <= delay_pipeline[106];
          delay_pipeline[108] <= delay_pipeline[107];
          delay_pipeline[109] <= delay_pipeline[108];
          delay_pipeline[110] <= delay_pipeline[109];
          delay_pipeline[111] <= delay_pipeline[110];
          delay_pipeline[112] <= delay_pipeline[111];
          delay_pipeline[113] <= delay_pipeline[112];
          delay_pipeline[114] <= delay_pipeline[113];
          delay_pipeline[115] <= delay_pipeline[114];
          delay_pipeline[116] <= delay_pipeline[115];
          delay_pipeline[117] <= delay_pipeline[116];
          delay_pipeline[118] <= delay_pipeline[117];
          delay_pipeline[119] <= delay_pipeline[118];
          delay_pipeline[120] <= delay_pipeline[119];
          delay_pipeline[121] <= delay_pipeline[120];
          delay_pipeline[122] <= delay_pipeline[121];
          delay_pipeline[123] <= delay_pipeline[122];
          delay_pipeline[124] <= delay_pipeline[123];
          delay_pipeline[125] <= delay_pipeline[124];
          delay_pipeline[126] <= delay_pipeline[125];
          delay_pipeline[127] <= delay_pipeline[126];
          delay_pipeline[128] <= delay_pipeline[127];
        end
      end
    end // Delay_Pipeline_process


  assign inputmux_1 = (cur_count == 6'b000000) ? delay_pipeline[0] :
                     (cur_count == 6'b000001) ? delay_pipeline[1] :
                     (cur_count == 6'b000010) ? delay_pipeline[2] :
                     (cur_count == 6'b000011) ? delay_pipeline[3] :
                     (cur_count == 6'b000100) ? delay_pipeline[4] :
                     (cur_count == 6'b000101) ? delay_pipeline[5] :
                     (cur_count == 6'b000110) ? delay_pipeline[6] :
                     (cur_count == 6'b000111) ? delay_pipeline[7] :
                     (cur_count == 6'b001000) ? delay_pipeline[8] :
                     (cur_count == 6'b001001) ? delay_pipeline[9] :
                     (cur_count == 6'b001010) ? delay_pipeline[10] :
                     (cur_count == 6'b001011) ? delay_pipeline[11] :
                     (cur_count == 6'b001100) ? delay_pipeline[12] :
                     (cur_count == 6'b001101) ? delay_pipeline[13] :
                     (cur_count == 6'b001110) ? delay_pipeline[15] :
                     (cur_count == 6'b001111) ? delay_pipeline[16] :
                     (cur_count == 6'b010000) ? delay_pipeline[17] :
                     (cur_count == 6'b010001) ? delay_pipeline[18] :
                     (cur_count == 6'b010010) ? delay_pipeline[19] :
                     (cur_count == 6'b010011) ? delay_pipeline[20] :
                     (cur_count == 6'b010100) ? delay_pipeline[21] :
                     (cur_count == 6'b010101) ? delay_pipeline[22] :
                     (cur_count == 6'b010110) ? delay_pipeline[23] :
                     (cur_count == 6'b010111) ? delay_pipeline[24] :
                     (cur_count == 6'b011000) ? delay_pipeline[25] :
                     (cur_count == 6'b011001) ? delay_pipeline[26] :
                     (cur_count == 6'b011010) ? delay_pipeline[27] :
                     (cur_count == 6'b011011) ? delay_pipeline[28] :
                     (cur_count == 6'b011100) ? delay_pipeline[29] :
                     (cur_count == 6'b011101) ? delay_pipeline[30] :
                     (cur_count == 6'b011110) ? delay_pipeline[31] :
                     (cur_count == 6'b011111) ? delay_pipeline[32] :
                     (cur_count == 6'b100000) ? delay_pipeline[33] :
                     (cur_count == 6'b100001) ? delay_pipeline[34] :
                     (cur_count == 6'b100010) ? delay_pipeline[35] :
                     (cur_count == 6'b100011) ? delay_pipeline[36] :
                     (cur_count == 6'b100100) ? delay_pipeline[37] :
                     (cur_count == 6'b100101) ? delay_pipeline[38] :
                     (cur_count == 6'b100110) ? delay_pipeline[39] :
                     (cur_count == 6'b100111) ? delay_pipeline[40] :
                     (cur_count == 6'b101000) ? delay_pipeline[41] :
                     (cur_count == 6'b101001) ? delay_pipeline[42] :
                     (cur_count == 6'b101010) ? delay_pipeline[43] :
                     (cur_count == 6'b101011) ? delay_pipeline[44] :
                     (cur_count == 6'b101100) ? delay_pipeline[45] :
                     (cur_count == 6'b101101) ? delay_pipeline[46] :
                     (cur_count == 6'b101110) ? delay_pipeline[47] :
                     (cur_count == 6'b101111) ? delay_pipeline[48] :
                     (cur_count == 6'b110000) ? delay_pipeline[49] :
                     delay_pipeline[50];

  assign inputmux_2 = (cur_count == 6'b000000) ? delay_pipeline[51] :
                     (cur_count == 6'b000001) ? delay_pipeline[52] :
                     (cur_count == 6'b000010) ? delay_pipeline[53] :
                     (cur_count == 6'b000011) ? delay_pipeline[54] :
                     (cur_count == 6'b000100) ? delay_pipeline[55] :
                     (cur_count == 6'b000101) ? delay_pipeline[56] :
                     (cur_count == 6'b000110) ? delay_pipeline[57] :
                     (cur_count == 6'b000111) ? delay_pipeline[58] :
                     (cur_count == 6'b001000) ? delay_pipeline[59] :
                     (cur_count == 6'b001001) ? delay_pipeline[60] :
                     (cur_count == 6'b001010) ? delay_pipeline[61] :
                     (cur_count == 6'b001011) ? delay_pipeline[62] :
                     (cur_count == 6'b001100) ? delay_pipeline[63] :
                     (cur_count == 6'b001101) ? delay_pipeline[64] :
                     (cur_count == 6'b001110) ? delay_pipeline[65] :
                     (cur_count == 6'b001111) ? delay_pipeline[66] :
                     (cur_count == 6'b010000) ? delay_pipeline[67] :
                     (cur_count == 6'b010001) ? delay_pipeline[68] :
                     (cur_count == 6'b010010) ? delay_pipeline[69] :
                     (cur_count == 6'b010011) ? delay_pipeline[70] :
                     (cur_count == 6'b010100) ? delay_pipeline[71] :
                     (cur_count == 6'b010101) ? delay_pipeline[72] :
                     (cur_count == 6'b010110) ? delay_pipeline[73] :
                     (cur_count == 6'b010111) ? delay_pipeline[74] :
                     (cur_count == 6'b011000) ? delay_pipeline[75] :
                     (cur_count == 6'b011001) ? delay_pipeline[76] :
                     (cur_count == 6'b011010) ? delay_pipeline[77] :
                     (cur_count == 6'b011011) ? delay_pipeline[78] :
                     (cur_count == 6'b011100) ? delay_pipeline[79] :
                     (cur_count == 6'b011101) ? delay_pipeline[80] :
                     (cur_count == 6'b011110) ? delay_pipeline[81] :
                     (cur_count == 6'b011111) ? delay_pipeline[82] :
                     (cur_count == 6'b100000) ? delay_pipeline[83] :
                     (cur_count == 6'b100001) ? delay_pipeline[84] :
                     (cur_count == 6'b100010) ? delay_pipeline[85] :
                     (cur_count == 6'b100011) ? delay_pipeline[86] :
                     (cur_count == 6'b100100) ? delay_pipeline[87] :
                     (cur_count == 6'b100101) ? delay_pipeline[88] :
                     (cur_count == 6'b100110) ? delay_pipeline[89] :
                     (cur_count == 6'b100111) ? delay_pipeline[90] :
                     (cur_count == 6'b101000) ? delay_pipeline[91] :
                     (cur_count == 6'b101001) ? delay_pipeline[92] :
                     (cur_count == 6'b101010) ? delay_pipeline[93] :
                     (cur_count == 6'b101011) ? delay_pipeline[94] :
                     (cur_count == 6'b101100) ? delay_pipeline[95] :
                     (cur_count == 6'b101101) ? delay_pipeline[96] :
                     (cur_count == 6'b101110) ? delay_pipeline[97] :
                     (cur_count == 6'b101111) ? delay_pipeline[98] :
                     (cur_count == 6'b110000) ? delay_pipeline[99] :
                     delay_pipeline[100];

  assign inputmux_3 = (cur_count == 6'b000000) ? delay_pipeline[101] :
                     (cur_count == 6'b000001) ? delay_pipeline[102] :
                     (cur_count == 6'b000010) ? delay_pipeline[103] :
                     (cur_count == 6'b000011) ? delay_pipeline[104] :
                     (cur_count == 6'b000100) ? delay_pipeline[105] :
                     (cur_count == 6'b000101) ? delay_pipeline[106] :
                     (cur_count == 6'b000110) ? delay_pipeline[107] :
                     (cur_count == 6'b000111) ? delay_pipeline[108] :
                     (cur_count == 6'b001000) ? delay_pipeline[109] :
                     (cur_count == 6'b001001) ? delay_pipeline[110] :
                     (cur_count == 6'b001010) ? delay_pipeline[111] :
                     (cur_count == 6'b001011) ? delay_pipeline[112] :
                     (cur_count == 6'b001100) ? delay_pipeline[113] :
                     (cur_count == 6'b001101) ? delay_pipeline[115] :
                     (cur_count == 6'b001110) ? delay_pipeline[116] :
                     (cur_count == 6'b001111) ? delay_pipeline[117] :
                     (cur_count == 6'b010000) ? delay_pipeline[118] :
                     (cur_count == 6'b010001) ? delay_pipeline[119] :
                     (cur_count == 6'b010010) ? delay_pipeline[120] :
                     (cur_count == 6'b010011) ? delay_pipeline[121] :
                     (cur_count == 6'b010100) ? delay_pipeline[122] :
                     (cur_count == 6'b010101) ? delay_pipeline[123] :
                     (cur_count == 6'b010110) ? delay_pipeline[124] :
                     (cur_count == 6'b010111) ? delay_pipeline[125] :
                     (cur_count == 6'b011000) ? delay_pipeline[126] :
                     (cur_count == 6'b011001) ? delay_pipeline[127] :
                     delay_pipeline[128];

  //   ------------------ Serial partition # 1 ------------------

  assign product_1_mux = (cur_count == 6'b000000) ? coeff1 :
                        (cur_count == 6'b000001) ? coeff2 :
                        (cur_count == 6'b000010) ? coeff3 :
                        (cur_count == 6'b000011) ? coeff4 :
                        (cur_count == 6'b000100) ? coeff5 :
                        (cur_count == 6'b000101) ? coeff6 :
                        (cur_count == 6'b000110) ? coeff7 :
                        (cur_count == 6'b000111) ? coeff8 :
                        (cur_count == 6'b001000) ? coeff9 :
                        (cur_count == 6'b001001) ? coeff10 :
                        (cur_count == 6'b001010) ? coeff11 :
                        (cur_count == 6'b001011) ? coeff12 :
                        (cur_count == 6'b001100) ? coeff13 :
                        (cur_count == 6'b001101) ? coeff14 :
                        (cur_count == 6'b001110) ? coeff16 :
                        (cur_count == 6'b001111) ? coeff17 :
                        (cur_count == 6'b010000) ? coeff18 :
                        (cur_count == 6'b010001) ? coeff19 :
                        (cur_count == 6'b010010) ? coeff20 :
                        (cur_count == 6'b010011) ? coeff21 :
                        (cur_count == 6'b010100) ? coeff22 :
                        (cur_count == 6'b010101) ? coeff23 :
                        (cur_count == 6'b010110) ? coeff24 :
                        (cur_count == 6'b010111) ? coeff25 :
                        (cur_count == 6'b011000) ? coeff26 :
                        (cur_count == 6'b011001) ? coeff27 :
                        (cur_count == 6'b011010) ? coeff28 :
                        (cur_count == 6'b011011) ? coeff29 :
                        (cur_count == 6'b011100) ? coeff30 :
                        (cur_count == 6'b011101) ? coeff31 :
                        (cur_count == 6'b011110) ? coeff32 :
                        (cur_count == 6'b011111) ? coeff33 :
                        (cur_count == 6'b100000) ? coeff34 :
                        (cur_count == 6'b100001) ? coeff35 :
                        (cur_count == 6'b100010) ? coeff36 :
                        (cur_count == 6'b100011) ? coeff37 :
                        (cur_count == 6'b100100) ? coeff38 :
                        (cur_count == 6'b100101) ? coeff39 :
                        (cur_count == 6'b100110) ? coeff40 :
                        (cur_count == 6'b100111) ? coeff41 :
                        (cur_count == 6'b101000) ? coeff42 :
                        (cur_count == 6'b101001) ? coeff43 :
                        (cur_count == 6'b101010) ? coeff44 :
                        (cur_count == 6'b101011) ? coeff45 :
                        (cur_count == 6'b101100) ? coeff46 :
                        (cur_count == 6'b101101) ? coeff47 :
                        (cur_count == 6'b101110) ? coeff48 :
                        (cur_count == 6'b101111) ? coeff49 :
                        (cur_count == 6'b110000) ? coeff50 :
                        coeff51;
  assign mul_temp = inputmux_1 * product_1_mux;
  assign product_1 = mul_temp[29:0];

  assign prod_typeconvert_1 = $signed({{5{product_1[29]}}, product_1});

  assign add_signext = prod_typeconvert_1;
  assign add_signext_1 = acc_out_1;
  assign add_temp = add_signext + add_signext_1;
  assign acc_sum_1 = add_temp[34:0];

  assign acc_in_1 = (phase_0 == 1'b1) ? prod_typeconvert_1 :
                   acc_sum_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  //   ------------------ Serial partition # 2 ------------------

  assign product_2_mux = (cur_count == 6'b000000) ? coeff52 :
                        (cur_count == 6'b000001) ? coeff53 :
                        (cur_count == 6'b000010) ? coeff54 :
                        (cur_count == 6'b000011) ? coeff55 :
                        (cur_count == 6'b000100) ? coeff56 :
                        (cur_count == 6'b000101) ? coeff57 :
                        (cur_count == 6'b000110) ? coeff58 :
                        (cur_count == 6'b000111) ? coeff59 :
                        (cur_count == 6'b001000) ? coeff60 :
                        (cur_count == 6'b001001) ? coeff61 :
                        (cur_count == 6'b001010) ? coeff62 :
                        (cur_count == 6'b001011) ? coeff63 :
                        (cur_count == 6'b001100) ? coeff64 :
                        (cur_count == 6'b001101) ? coeff65 :
                        (cur_count == 6'b001110) ? coeff66 :
                        (cur_count == 6'b001111) ? coeff67 :
                        (cur_count == 6'b010000) ? coeff68 :
                        (cur_count == 6'b010001) ? coeff69 :
                        (cur_count == 6'b010010) ? coeff70 :
                        (cur_count == 6'b010011) ? coeff71 :
                        (cur_count == 6'b010100) ? coeff72 :
                        (cur_count == 6'b010101) ? coeff73 :
                        (cur_count == 6'b010110) ? coeff74 :
                        (cur_count == 6'b010111) ? coeff75 :
                        (cur_count == 6'b011000) ? coeff76 :
                        (cur_count == 6'b011001) ? coeff77 :
                        (cur_count == 6'b011010) ? coeff78 :
                        (cur_count == 6'b011011) ? coeff79 :
                        (cur_count == 6'b011100) ? coeff80 :
                        (cur_count == 6'b011101) ? coeff81 :
                        (cur_count == 6'b011110) ? coeff82 :
                        (cur_count == 6'b011111) ? coeff83 :
                        (cur_count == 6'b100000) ? coeff84 :
                        (cur_count == 6'b100001) ? coeff85 :
                        (cur_count == 6'b100010) ? coeff86 :
                        (cur_count == 6'b100011) ? coeff87 :
                        (cur_count == 6'b100100) ? coeff88 :
                        (cur_count == 6'b100101) ? coeff89 :
                        (cur_count == 6'b100110) ? coeff90 :
                        (cur_count == 6'b100111) ? coeff91 :
                        (cur_count == 6'b101000) ? coeff92 :
                        (cur_count == 6'b101001) ? coeff93 :
                        (cur_count == 6'b101010) ? coeff94 :
                        (cur_count == 6'b101011) ? coeff95 :
                        (cur_count == 6'b101100) ? coeff96 :
                        (cur_count == 6'b101101) ? coeff97 :
                        (cur_count == 6'b101110) ? coeff98 :
                        (cur_count == 6'b101111) ? coeff99 :
                        (cur_count == 6'b110000) ? coeff100 :
                        coeff101;
  assign mul_temp_1 = inputmux_2 * product_2_mux;
  assign product_2 = mul_temp_1[29:0];

  assign prod_typeconvert_2 = $signed({{5{product_2[29]}}, product_2});

  assign add_signext_2 = prod_typeconvert_2;
  assign add_signext_3 = acc_out_2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign acc_sum_2 = add_temp_1[34:0];

  assign acc_in_2 = (phase_0 == 1'b1) ? prod_typeconvert_2 :
                   acc_sum_2;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_2_process
      if (reset == 1'b1) begin
        acc_out_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_2 <= acc_in_2;
        end
      end
    end // Acc_reg_2_process

  //   ------------------ Serial partition # 3 ------------------

  assign product_3_mux = (cur_count == 6'b000000) ? coeff102 :
                        (cur_count == 6'b000001) ? coeff103 :
                        (cur_count == 6'b000010) ? coeff104 :
                        (cur_count == 6'b000011) ? coeff105 :
                        (cur_count == 6'b000100) ? coeff106 :
                        (cur_count == 6'b000101) ? coeff107 :
                        (cur_count == 6'b000110) ? coeff108 :
                        (cur_count == 6'b000111) ? coeff109 :
                        (cur_count == 6'b001000) ? coeff110 :
                        (cur_count == 6'b001001) ? coeff111 :
                        (cur_count == 6'b001010) ? coeff112 :
                        (cur_count == 6'b001011) ? coeff113 :
                        (cur_count == 6'b001100) ? coeff114 :
                        (cur_count == 6'b001101) ? coeff116 :
                        (cur_count == 6'b001110) ? coeff117 :
                        (cur_count == 6'b001111) ? coeff118 :
                        (cur_count == 6'b010000) ? coeff119 :
                        (cur_count == 6'b010001) ? coeff120 :
                        (cur_count == 6'b010010) ? coeff121 :
                        (cur_count == 6'b010011) ? coeff122 :
                        (cur_count == 6'b010100) ? coeff123 :
                        (cur_count == 6'b010101) ? coeff124 :
                        (cur_count == 6'b010110) ? coeff125 :
                        (cur_count == 6'b010111) ? coeff126 :
                        (cur_count == 6'b011000) ? coeff127 :
                        (cur_count == 6'b011001) ? coeff128 :
                        coeff129;
  assign mul_temp_2 = inputmux_3 * product_3_mux;
  assign product_3 = mul_temp_2[29:0];

  assign prod_typeconvert_3 = $signed({{5{product_3[29]}}, product_3});

  assign add_signext_4 = prod_typeconvert_3;
  assign add_signext_5 = acc_out_3;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign acc_sum_3 = add_temp_2[34:0];

  assign acc_in_3 = (phase_0 == 1'b1) ? prod_typeconvert_3 :
                   acc_sum_3;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_3_process
      if (reset == 1'b1) begin
        acc_out_3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          acc_out_3 <= acc_in_3;
        end
      end
    end // Acc_reg_3_process

  assign add_signext_6 = acc_out_3;
  assign add_signext_7 = acc_out_2;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1 = add_temp_3[34:0];

  assign add_signext_8 = sum1;
  assign add_signext_9 = acc_out_1;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum2 = add_temp_4[34:0];

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= sum2;
        end
      end
    end // Finalsum_reg_process

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_49 == 1'b1) begin
          output_register <= acc_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // LPF_128
